package com.uflycn.uoperation.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.uflycn.uoperation.bean.BrokenInspectRecord;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "operation_broken_inspect".
*/
public class BrokenInspectRecordDao extends AbstractDao<BrokenInspectRecord, Long> {

    public static final String TABLENAME = "operation_broken_inspect";

    /**
     * Properties of entity BrokenInspectRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property SysBrokenInspectRecordId = new Property(0, Long.class, "sysBrokenInspectRecordId", true, "sysBrokenInspectRecordId");
        public final static Property SysBrokenPatrolDetailId = new Property(1, int.class, "sysBrokenPatrolDetailId", false, "PlatformId");
        public final static Property BrokenDocumentId = new Property(2, int.class, "BrokenDocumentId", false, "BROKEN_DOCUMENT_ID");
        public final static Property DocumentPlatformId = new Property(3, int.class, "DocumentPlatformId", false, "DOCUMENT_PLATFORM_ID");
        public final static Property PatrolImage = new Property(4, String.class, "PatrolImage", false, "PATROL_IMAGE");
        public final static Property Remark = new Property(5, String.class, "Remark", false, "REMARK");
        public final static Property BrokenStatus = new Property(6, int.class, "BrokenStatus", false, "BROKEN_STATUS");
        public final static Property CreateDate = new Property(7, String.class, "CreateDate", false, "CREATE_DATE");
        public final static Property UploadFlag = new Property(8, int.class, "UploadFlag", false, "UPLOAD_FLAG");
        public final static Property PlanDailyPlanSectionIDs = new Property(9, String.class, "PlanDailyPlanSectionIDs", false, "PLAN_DAILY_PLAN_SECTION_IDS");
        public final static Property SysPatrolExecutionID = new Property(10, String.class, "sysPatrolExecutionID", false, "SYS_PATROL_EXECUTION_ID");
    }


    public BrokenInspectRecordDao(DaoConfig config) {
        super(config);
    }
    
    public BrokenInspectRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"operation_broken_inspect\" (" + //
                "\"sysBrokenInspectRecordId\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: sysBrokenInspectRecordId
                "\"PlatformId\" INTEGER NOT NULL ," + // 1: sysBrokenPatrolDetailId
                "\"BROKEN_DOCUMENT_ID\" INTEGER NOT NULL ," + // 2: BrokenDocumentId
                "\"DOCUMENT_PLATFORM_ID\" INTEGER NOT NULL ," + // 3: DocumentPlatformId
                "\"PATROL_IMAGE\" TEXT," + // 4: PatrolImage
                "\"REMARK\" TEXT," + // 5: Remark
                "\"BROKEN_STATUS\" INTEGER NOT NULL ," + // 6: BrokenStatus
                "\"CREATE_DATE\" TEXT," + // 7: CreateDate
                "\"UPLOAD_FLAG\" INTEGER NOT NULL ," + // 8: UploadFlag
                "\"PLAN_DAILY_PLAN_SECTION_IDS\" TEXT," + // 9: PlanDailyPlanSectionIDs
                "\"SYS_PATROL_EXECUTION_ID\" TEXT);"); // 10: sysPatrolExecutionID
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"operation_broken_inspect\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BrokenInspectRecord entity) {
        stmt.clearBindings();
 
        Long sysBrokenInspectRecordId = entity.getSysBrokenInspectRecordId();
        if (sysBrokenInspectRecordId != null) {
            stmt.bindLong(1, sysBrokenInspectRecordId);
        }
        stmt.bindLong(2, entity.getSysBrokenPatrolDetailId());
        stmt.bindLong(3, entity.getBrokenDocumentId());
        stmt.bindLong(4, entity.getDocumentPlatformId());
 
        String PatrolImage = entity.getPatrolImage();
        if (PatrolImage != null) {
            stmt.bindString(5, PatrolImage);
        }
 
        String Remark = entity.getRemark();
        if (Remark != null) {
            stmt.bindString(6, Remark);
        }
        stmt.bindLong(7, entity.getBrokenStatus());
 
        String CreateDate = entity.getCreateDate();
        if (CreateDate != null) {
            stmt.bindString(8, CreateDate);
        }
        stmt.bindLong(9, entity.getUploadFlag());
 
        String PlanDailyPlanSectionIDs = entity.getPlanDailyPlanSectionIDs();
        if (PlanDailyPlanSectionIDs != null) {
            stmt.bindString(10, PlanDailyPlanSectionIDs);
        }
 
        String sysPatrolExecutionID = entity.getSysPatrolExecutionID();
        if (sysPatrolExecutionID != null) {
            stmt.bindString(11, sysPatrolExecutionID);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BrokenInspectRecord entity) {
        stmt.clearBindings();
 
        Long sysBrokenInspectRecordId = entity.getSysBrokenInspectRecordId();
        if (sysBrokenInspectRecordId != null) {
            stmt.bindLong(1, sysBrokenInspectRecordId);
        }
        stmt.bindLong(2, entity.getSysBrokenPatrolDetailId());
        stmt.bindLong(3, entity.getBrokenDocumentId());
        stmt.bindLong(4, entity.getDocumentPlatformId());
 
        String PatrolImage = entity.getPatrolImage();
        if (PatrolImage != null) {
            stmt.bindString(5, PatrolImage);
        }
 
        String Remark = entity.getRemark();
        if (Remark != null) {
            stmt.bindString(6, Remark);
        }
        stmt.bindLong(7, entity.getBrokenStatus());
 
        String CreateDate = entity.getCreateDate();
        if (CreateDate != null) {
            stmt.bindString(8, CreateDate);
        }
        stmt.bindLong(9, entity.getUploadFlag());
 
        String PlanDailyPlanSectionIDs = entity.getPlanDailyPlanSectionIDs();
        if (PlanDailyPlanSectionIDs != null) {
            stmt.bindString(10, PlanDailyPlanSectionIDs);
        }
 
        String sysPatrolExecutionID = entity.getSysPatrolExecutionID();
        if (sysPatrolExecutionID != null) {
            stmt.bindString(11, sysPatrolExecutionID);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public BrokenInspectRecord readEntity(Cursor cursor, int offset) {
        BrokenInspectRecord entity = new BrokenInspectRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // sysBrokenInspectRecordId
            cursor.getInt(offset + 1), // sysBrokenPatrolDetailId
            cursor.getInt(offset + 2), // BrokenDocumentId
            cursor.getInt(offset + 3), // DocumentPlatformId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // PatrolImage
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // Remark
            cursor.getInt(offset + 6), // BrokenStatus
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // CreateDate
            cursor.getInt(offset + 8), // UploadFlag
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // PlanDailyPlanSectionIDs
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // sysPatrolExecutionID
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BrokenInspectRecord entity, int offset) {
        entity.setSysBrokenInspectRecordId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSysBrokenPatrolDetailId(cursor.getInt(offset + 1));
        entity.setBrokenDocumentId(cursor.getInt(offset + 2));
        entity.setDocumentPlatformId(cursor.getInt(offset + 3));
        entity.setPatrolImage(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRemark(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setBrokenStatus(cursor.getInt(offset + 6));
        entity.setCreateDate(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setUploadFlag(cursor.getInt(offset + 8));
        entity.setPlanDailyPlanSectionIDs(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setSysPatrolExecutionID(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(BrokenInspectRecord entity, long rowId) {
        entity.setSysBrokenInspectRecordId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(BrokenInspectRecord entity) {
        if(entity != null) {
            return entity.getSysBrokenInspectRecordId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BrokenInspectRecord entity) {
        return entity.getSysBrokenInspectRecordId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
