package com.uflycn.uoperation.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.uflycn.uoperation.bean.AssistRecord;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "t_assist_record".
*/
public class AssistRecordDao extends AbstractDao<AssistRecord, Long> {

    public static final String TABLENAME = "t_assist_record";

    /**
     * Properties of entity AssistRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "Id", true, "_id");
        public final static Property SysTowerID = new Property(1, int.class, "sysTowerID", false, "SYS_TOWER_ID");
        public final static Property IsAgreement = new Property(2, boolean.class, "IsAgreement", false, "IS_AGREEMENT");
        public final static Property Topography = new Property(3, String.class, "Topography", false, "TOPOGRAPHY");
        public final static Property GroundingLeadServerityLevel = new Property(4, int.class, "GroundingLeadServerityLevel", false, "GROUNDING_LEAD_SERVERITY_LEVEL");
        public final static Property GroundingLeadIsInsulate = new Property(5, boolean.class, "GroundingLeadIsInsulate", false, "GROUNDING_LEAD_IS_INSULATE");
        public final static Property PullLineServerityLevel = new Property(6, int.class, "PullLineServerityLevel", false, "PULL_LINE_SERVERITY_LEVEL");
        public final static Property PullLineIsInsulate = new Property(7, boolean.class, "PullLineIsInsulate", false, "PULL_LINE_IS_INSULATE");
        public final static Property Assess = new Property(8, int.class, "Assess", false, "ASSESS");
        public final static Property Remark = new Property(9, String.class, "Remark", false, "REMARK");
        public final static Property FileListJson = new Property(10, String.class, "fileListJson", false, "FILE_LIST_JSON");
        public final static Property IsUpload = new Property(11, boolean.class, "isUpload", false, "IS_UPLOAD");
    }


    public AssistRecordDao(DaoConfig config) {
        super(config);
    }
    
    public AssistRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"t_assist_record\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: Id
                "\"SYS_TOWER_ID\" INTEGER NOT NULL ," + // 1: sysTowerID
                "\"IS_AGREEMENT\" INTEGER NOT NULL ," + // 2: IsAgreement
                "\"TOPOGRAPHY\" TEXT," + // 3: Topography
                "\"GROUNDING_LEAD_SERVERITY_LEVEL\" INTEGER NOT NULL ," + // 4: GroundingLeadServerityLevel
                "\"GROUNDING_LEAD_IS_INSULATE\" INTEGER NOT NULL ," + // 5: GroundingLeadIsInsulate
                "\"PULL_LINE_SERVERITY_LEVEL\" INTEGER NOT NULL ," + // 6: PullLineServerityLevel
                "\"PULL_LINE_IS_INSULATE\" INTEGER NOT NULL ," + // 7: PullLineIsInsulate
                "\"ASSESS\" INTEGER NOT NULL ," + // 8: Assess
                "\"REMARK\" TEXT," + // 9: Remark
                "\"FILE_LIST_JSON\" TEXT," + // 10: fileListJson
                "\"IS_UPLOAD\" INTEGER NOT NULL );"); // 11: isUpload
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"t_assist_record\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AssistRecord entity) {
        stmt.clearBindings();
 
        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(1, Id);
        }
        stmt.bindLong(2, entity.getSysTowerID());
        stmt.bindLong(3, entity.getIsAgreement() ? 1L: 0L);
 
        String Topography = entity.getTopography();
        if (Topography != null) {
            stmt.bindString(4, Topography);
        }
        stmt.bindLong(5, entity.getGroundingLeadServerityLevel());
        stmt.bindLong(6, entity.getGroundingLeadIsInsulate() ? 1L: 0L);
        stmt.bindLong(7, entity.getPullLineServerityLevel());
        stmt.bindLong(8, entity.getPullLineIsInsulate() ? 1L: 0L);
        stmt.bindLong(9, entity.getAssess());
 
        String Remark = entity.getRemark();
        if (Remark != null) {
            stmt.bindString(10, Remark);
        }
 
        String fileListJson = entity.getFileListJson();
        if (fileListJson != null) {
            stmt.bindString(11, fileListJson);
        }
        stmt.bindLong(12, entity.getIsUpload() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AssistRecord entity) {
        stmt.clearBindings();
 
        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(1, Id);
        }
        stmt.bindLong(2, entity.getSysTowerID());
        stmt.bindLong(3, entity.getIsAgreement() ? 1L: 0L);
 
        String Topography = entity.getTopography();
        if (Topography != null) {
            stmt.bindString(4, Topography);
        }
        stmt.bindLong(5, entity.getGroundingLeadServerityLevel());
        stmt.bindLong(6, entity.getGroundingLeadIsInsulate() ? 1L: 0L);
        stmt.bindLong(7, entity.getPullLineServerityLevel());
        stmt.bindLong(8, entity.getPullLineIsInsulate() ? 1L: 0L);
        stmt.bindLong(9, entity.getAssess());
 
        String Remark = entity.getRemark();
        if (Remark != null) {
            stmt.bindString(10, Remark);
        }
 
        String fileListJson = entity.getFileListJson();
        if (fileListJson != null) {
            stmt.bindString(11, fileListJson);
        }
        stmt.bindLong(12, entity.getIsUpload() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public AssistRecord readEntity(Cursor cursor, int offset) {
        AssistRecord entity = new AssistRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // Id
            cursor.getInt(offset + 1), // sysTowerID
            cursor.getShort(offset + 2) != 0, // IsAgreement
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Topography
            cursor.getInt(offset + 4), // GroundingLeadServerityLevel
            cursor.getShort(offset + 5) != 0, // GroundingLeadIsInsulate
            cursor.getInt(offset + 6), // PullLineServerityLevel
            cursor.getShort(offset + 7) != 0, // PullLineIsInsulate
            cursor.getInt(offset + 8), // Assess
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // Remark
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // fileListJson
            cursor.getShort(offset + 11) != 0 // isUpload
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AssistRecord entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSysTowerID(cursor.getInt(offset + 1));
        entity.setIsAgreement(cursor.getShort(offset + 2) != 0);
        entity.setTopography(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setGroundingLeadServerityLevel(cursor.getInt(offset + 4));
        entity.setGroundingLeadIsInsulate(cursor.getShort(offset + 5) != 0);
        entity.setPullLineServerityLevel(cursor.getInt(offset + 6));
        entity.setPullLineIsInsulate(cursor.getShort(offset + 7) != 0);
        entity.setAssess(cursor.getInt(offset + 8));
        entity.setRemark(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setFileListJson(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setIsUpload(cursor.getShort(offset + 11) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(AssistRecord entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(AssistRecord entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AssistRecord entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
