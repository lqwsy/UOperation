package com.uflycn.uoperation.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.uflycn.uoperation.bean.LineCrossDelete;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "operation_crossDelete".
*/
public class LineCrossDeleteDao extends AbstractDao<LineCrossDelete, Long> {

    public static final String TABLENAME = "operation_crossDelete";

    /**
     * Properties of entity LineCrossDelete.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "Id", true, "_id");
        public final static Property PictruePath = new Property(1, String.class, "PictruePath", false, "PICTRUE_PATH");
        public final static Property SysLineCrossId = new Property(2, int.class, "sysLineCrossId", false, "SYS_LINE_CROSS_ID");
        public final static Property Remark = new Property(3, String.class, "Remark", false, "REMARK");
        public final static Property UploadFlag = new Property(4, int.class, "UploadFlag", false, "UPLOAD_FLAG");
        public final static Property CheckerId = new Property(5, String.class, "CheckerId", false, "CHECKER_ID");
        public final static Property CheckedTime = new Property(6, String.class, "CheckedTime", false, "CHECKED_TIME");
        public final static Property PlanDailyPlanSectionIDs = new Property(7, String.class, "PlanDailyPlanSectionIDs", false, "PLAN_DAILY_PLAN_SECTION_IDS");
        public final static Property SysPatrolExecutionID = new Property(8, String.class, "sysPatrolExecutionID", false, "SYS_PATROL_EXECUTION_ID");
    }


    public LineCrossDeleteDao(DaoConfig config) {
        super(config);
    }
    
    public LineCrossDeleteDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"operation_crossDelete\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: Id
                "\"PICTRUE_PATH\" TEXT," + // 1: PictruePath
                "\"SYS_LINE_CROSS_ID\" INTEGER NOT NULL ," + // 2: sysLineCrossId
                "\"REMARK\" TEXT," + // 3: Remark
                "\"UPLOAD_FLAG\" INTEGER NOT NULL ," + // 4: UploadFlag
                "\"CHECKER_ID\" TEXT," + // 5: CheckerId
                "\"CHECKED_TIME\" TEXT," + // 6: CheckedTime
                "\"PLAN_DAILY_PLAN_SECTION_IDS\" TEXT," + // 7: PlanDailyPlanSectionIDs
                "\"SYS_PATROL_EXECUTION_ID\" TEXT);"); // 8: sysPatrolExecutionID
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"operation_crossDelete\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LineCrossDelete entity) {
        stmt.clearBindings();
 
        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(1, Id);
        }
 
        String PictruePath = entity.getPictruePath();
        if (PictruePath != null) {
            stmt.bindString(2, PictruePath);
        }
        stmt.bindLong(3, entity.getSysLineCrossId());
 
        String Remark = entity.getRemark();
        if (Remark != null) {
            stmt.bindString(4, Remark);
        }
        stmt.bindLong(5, entity.getUploadFlag());
 
        String CheckerId = entity.getCheckerId();
        if (CheckerId != null) {
            stmt.bindString(6, CheckerId);
        }
 
        String CheckedTime = entity.getCheckedTime();
        if (CheckedTime != null) {
            stmt.bindString(7, CheckedTime);
        }
 
        String PlanDailyPlanSectionIDs = entity.getPlanDailyPlanSectionIDs();
        if (PlanDailyPlanSectionIDs != null) {
            stmt.bindString(8, PlanDailyPlanSectionIDs);
        }
 
        String sysPatrolExecutionID = entity.getSysPatrolExecutionID();
        if (sysPatrolExecutionID != null) {
            stmt.bindString(9, sysPatrolExecutionID);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LineCrossDelete entity) {
        stmt.clearBindings();
 
        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(1, Id);
        }
 
        String PictruePath = entity.getPictruePath();
        if (PictruePath != null) {
            stmt.bindString(2, PictruePath);
        }
        stmt.bindLong(3, entity.getSysLineCrossId());
 
        String Remark = entity.getRemark();
        if (Remark != null) {
            stmt.bindString(4, Remark);
        }
        stmt.bindLong(5, entity.getUploadFlag());
 
        String CheckerId = entity.getCheckerId();
        if (CheckerId != null) {
            stmt.bindString(6, CheckerId);
        }
 
        String CheckedTime = entity.getCheckedTime();
        if (CheckedTime != null) {
            stmt.bindString(7, CheckedTime);
        }
 
        String PlanDailyPlanSectionIDs = entity.getPlanDailyPlanSectionIDs();
        if (PlanDailyPlanSectionIDs != null) {
            stmt.bindString(8, PlanDailyPlanSectionIDs);
        }
 
        String sysPatrolExecutionID = entity.getSysPatrolExecutionID();
        if (sysPatrolExecutionID != null) {
            stmt.bindString(9, sysPatrolExecutionID);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public LineCrossDelete readEntity(Cursor cursor, int offset) {
        LineCrossDelete entity = new LineCrossDelete( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // Id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // PictruePath
            cursor.getInt(offset + 2), // sysLineCrossId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Remark
            cursor.getInt(offset + 4), // UploadFlag
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // CheckerId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // CheckedTime
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // PlanDailyPlanSectionIDs
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // sysPatrolExecutionID
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LineCrossDelete entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPictruePath(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSysLineCrossId(cursor.getInt(offset + 2));
        entity.setRemark(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUploadFlag(cursor.getInt(offset + 4));
        entity.setCheckerId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCheckedTime(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPlanDailyPlanSectionIDs(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSysPatrolExecutionID(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(LineCrossDelete entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(LineCrossDelete entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LineCrossDelete entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
