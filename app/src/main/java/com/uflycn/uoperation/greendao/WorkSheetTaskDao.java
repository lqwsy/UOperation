package com.uflycn.uoperation.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.uflycn.uoperation.bean.WorkSheetTask;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "operation_WorksheetTask".
*/
public class WorkSheetTaskDao extends AbstractDao<WorkSheetTask, Long> {

    public static final String TABLENAME = "operation_WorksheetTask";

    /**
     * Properties of entity WorkSheetTask.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property SysTaskId = new Property(0, Long.class, "sysTaskId", true, "_id");
        public final static Property TaskNo = new Property(1, String.class, "TaskNo", false, "TASK_NO");
        public final static Property BusinessId = new Property(2, int.class, "BusinessId", false, "BUSINESS_ID");
        public final static Property BusinessType = new Property(3, int.class, "BusinessType", false, "BUSINESS_TYPE");
        public final static Property SysGridLineID = new Property(4, Integer.class, "sysGridLineID", false, "SYS_GRID_LINE_ID");
        public final static Property TaskContent = new Property(5, String.class, "TaskContent", false, "TASK_CONTENT");
        public final static Property Status = new Property(6, int.class, "Status", false, "STATUS");
        public final static Property Operator = new Property(7, String.class, "Operator", false, "OPERATOR");
        public final static Property OperationTime = new Property(8, String.class, "OperationTime", false, "OPERATION_TIME");
        public final static Property Remark = new Property(9, String.class, "Remark", false, "REMARK");
        public final static Property Deleted = new Property(10, boolean.class, "Deleted", false, "DELETED");
        public final static Property CreatedTime = new Property(11, String.class, "CreatedTime", false, "CREATED_TIME");
        public final static Property UploadFlag = new Property(12, boolean.class, "UploadFlag", false, "UPLOAD_FLAG");
        public final static Property DeviceId = new Property(13, int.class, "DeviceId", false, "DEVICE_ID");
        public final static Property DeviceNo = new Property(14, String.class, "DeviceNo", false, "DEVICE_NO");
        public final static Property DeviceType = new Property(15, int.class, "DeviceType", false, "DEVICE_TYPE");
        public final static Property NearDeviceId = new Property(16, Integer.class, "NearDeviceId", false, "NEAR_DEVICE_ID");
        public final static Property NearDeviceNo = new Property(17, String.class, "NearDeviceNo", false, "NEAR_DEVICE_NO");
        public final static Property NearDeviceType = new Property(18, Integer.class, "NearDeviceType", false, "NEAR_DEVICE_TYPE");
        public final static Property CreatedBy = new Property(19, String.class, "CreatedBy", false, "CREATED_BY");
        public final static Property CreatedUser = new Property(20, String.class, "CreatedUser", false, "CREATED_USER");
        public final static Property Phone = new Property(21, String.class, "Phone", false, "PHONE");
        public final static Property LineName = new Property(22, String.class, "LineName", false, "LINE_NAME");
        public final static Property ReceiverId = new Property(23, String.class, "ReceiverId", false, "RECEIVER_ID");
        public final static Property PlanDailyPlanSectionIDs = new Property(24, String.class, "PlanDailyPlanSectionIDs", false, "PLAN_DAILY_PLAN_SECTION_IDS");
    }


    public WorkSheetTaskDao(DaoConfig config) {
        super(config);
    }
    
    public WorkSheetTaskDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"operation_WorksheetTask\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: sysTaskId
                "\"TASK_NO\" TEXT," + // 1: TaskNo
                "\"BUSINESS_ID\" INTEGER NOT NULL ," + // 2: BusinessId
                "\"BUSINESS_TYPE\" INTEGER NOT NULL ," + // 3: BusinessType
                "\"SYS_GRID_LINE_ID\" INTEGER," + // 4: sysGridLineID
                "\"TASK_CONTENT\" TEXT," + // 5: TaskContent
                "\"STATUS\" INTEGER NOT NULL ," + // 6: Status
                "\"OPERATOR\" TEXT," + // 7: Operator
                "\"OPERATION_TIME\" TEXT," + // 8: OperationTime
                "\"REMARK\" TEXT," + // 9: Remark
                "\"DELETED\" INTEGER NOT NULL ," + // 10: Deleted
                "\"CREATED_TIME\" TEXT," + // 11: CreatedTime
                "\"UPLOAD_FLAG\" INTEGER NOT NULL ," + // 12: UploadFlag
                "\"DEVICE_ID\" INTEGER NOT NULL ," + // 13: DeviceId
                "\"DEVICE_NO\" TEXT," + // 14: DeviceNo
                "\"DEVICE_TYPE\" INTEGER NOT NULL ," + // 15: DeviceType
                "\"NEAR_DEVICE_ID\" INTEGER," + // 16: NearDeviceId
                "\"NEAR_DEVICE_NO\" TEXT," + // 17: NearDeviceNo
                "\"NEAR_DEVICE_TYPE\" INTEGER," + // 18: NearDeviceType
                "\"CREATED_BY\" TEXT," + // 19: CreatedBy
                "\"CREATED_USER\" TEXT," + // 20: CreatedUser
                "\"PHONE\" TEXT," + // 21: Phone
                "\"LINE_NAME\" TEXT," + // 22: LineName
                "\"RECEIVER_ID\" TEXT," + // 23: ReceiverId
                "\"PLAN_DAILY_PLAN_SECTION_IDS\" TEXT);"); // 24: PlanDailyPlanSectionIDs
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"operation_WorksheetTask\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, WorkSheetTask entity) {
        stmt.clearBindings();
 
        Long sysTaskId = entity.getSysTaskId();
        if (sysTaskId != null) {
            stmt.bindLong(1, sysTaskId);
        }
 
        String TaskNo = entity.getTaskNo();
        if (TaskNo != null) {
            stmt.bindString(2, TaskNo);
        }
        stmt.bindLong(3, entity.getBusinessId());
        stmt.bindLong(4, entity.getBusinessType());
 
        Integer sysGridLineID = entity.getSysGridLineID();
        if (sysGridLineID != null) {
            stmt.bindLong(5, sysGridLineID);
        }
 
        String TaskContent = entity.getTaskContent();
        if (TaskContent != null) {
            stmt.bindString(6, TaskContent);
        }
        stmt.bindLong(7, entity.getStatus());
 
        String Operator = entity.getOperator();
        if (Operator != null) {
            stmt.bindString(8, Operator);
        }
 
        String OperationTime = entity.getOperationTime();
        if (OperationTime != null) {
            stmt.bindString(9, OperationTime);
        }
 
        String Remark = entity.getRemark();
        if (Remark != null) {
            stmt.bindString(10, Remark);
        }
        stmt.bindLong(11, entity.getDeleted() ? 1L: 0L);
 
        String CreatedTime = entity.getCreatedTime();
        if (CreatedTime != null) {
            stmt.bindString(12, CreatedTime);
        }
        stmt.bindLong(13, entity.getUploadFlag() ? 1L: 0L);
        stmt.bindLong(14, entity.getDeviceId());
 
        String DeviceNo = entity.getDeviceNo();
        if (DeviceNo != null) {
            stmt.bindString(15, DeviceNo);
        }
        stmt.bindLong(16, entity.getDeviceType());
 
        Integer NearDeviceId = entity.getNearDeviceId();
        if (NearDeviceId != null) {
            stmt.bindLong(17, NearDeviceId);
        }
 
        String NearDeviceNo = entity.getNearDeviceNo();
        if (NearDeviceNo != null) {
            stmt.bindString(18, NearDeviceNo);
        }
 
        Integer NearDeviceType = entity.getNearDeviceType();
        if (NearDeviceType != null) {
            stmt.bindLong(19, NearDeviceType);
        }
 
        String CreatedBy = entity.getCreatedBy();
        if (CreatedBy != null) {
            stmt.bindString(20, CreatedBy);
        }
 
        String CreatedUser = entity.getCreatedUser();
        if (CreatedUser != null) {
            stmt.bindString(21, CreatedUser);
        }
 
        String Phone = entity.getPhone();
        if (Phone != null) {
            stmt.bindString(22, Phone);
        }
 
        String LineName = entity.getLineName();
        if (LineName != null) {
            stmt.bindString(23, LineName);
        }
 
        String ReceiverId = entity.getReceiverId();
        if (ReceiverId != null) {
            stmt.bindString(24, ReceiverId);
        }
 
        String PlanDailyPlanSectionIDs = entity.getPlanDailyPlanSectionIDs();
        if (PlanDailyPlanSectionIDs != null) {
            stmt.bindString(25, PlanDailyPlanSectionIDs);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, WorkSheetTask entity) {
        stmt.clearBindings();
 
        Long sysTaskId = entity.getSysTaskId();
        if (sysTaskId != null) {
            stmt.bindLong(1, sysTaskId);
        }
 
        String TaskNo = entity.getTaskNo();
        if (TaskNo != null) {
            stmt.bindString(2, TaskNo);
        }
        stmt.bindLong(3, entity.getBusinessId());
        stmt.bindLong(4, entity.getBusinessType());
 
        Integer sysGridLineID = entity.getSysGridLineID();
        if (sysGridLineID != null) {
            stmt.bindLong(5, sysGridLineID);
        }
 
        String TaskContent = entity.getTaskContent();
        if (TaskContent != null) {
            stmt.bindString(6, TaskContent);
        }
        stmt.bindLong(7, entity.getStatus());
 
        String Operator = entity.getOperator();
        if (Operator != null) {
            stmt.bindString(8, Operator);
        }
 
        String OperationTime = entity.getOperationTime();
        if (OperationTime != null) {
            stmt.bindString(9, OperationTime);
        }
 
        String Remark = entity.getRemark();
        if (Remark != null) {
            stmt.bindString(10, Remark);
        }
        stmt.bindLong(11, entity.getDeleted() ? 1L: 0L);
 
        String CreatedTime = entity.getCreatedTime();
        if (CreatedTime != null) {
            stmt.bindString(12, CreatedTime);
        }
        stmt.bindLong(13, entity.getUploadFlag() ? 1L: 0L);
        stmt.bindLong(14, entity.getDeviceId());
 
        String DeviceNo = entity.getDeviceNo();
        if (DeviceNo != null) {
            stmt.bindString(15, DeviceNo);
        }
        stmt.bindLong(16, entity.getDeviceType());
 
        Integer NearDeviceId = entity.getNearDeviceId();
        if (NearDeviceId != null) {
            stmt.bindLong(17, NearDeviceId);
        }
 
        String NearDeviceNo = entity.getNearDeviceNo();
        if (NearDeviceNo != null) {
            stmt.bindString(18, NearDeviceNo);
        }
 
        Integer NearDeviceType = entity.getNearDeviceType();
        if (NearDeviceType != null) {
            stmt.bindLong(19, NearDeviceType);
        }
 
        String CreatedBy = entity.getCreatedBy();
        if (CreatedBy != null) {
            stmt.bindString(20, CreatedBy);
        }
 
        String CreatedUser = entity.getCreatedUser();
        if (CreatedUser != null) {
            stmt.bindString(21, CreatedUser);
        }
 
        String Phone = entity.getPhone();
        if (Phone != null) {
            stmt.bindString(22, Phone);
        }
 
        String LineName = entity.getLineName();
        if (LineName != null) {
            stmt.bindString(23, LineName);
        }
 
        String ReceiverId = entity.getReceiverId();
        if (ReceiverId != null) {
            stmt.bindString(24, ReceiverId);
        }
 
        String PlanDailyPlanSectionIDs = entity.getPlanDailyPlanSectionIDs();
        if (PlanDailyPlanSectionIDs != null) {
            stmt.bindString(25, PlanDailyPlanSectionIDs);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public WorkSheetTask readEntity(Cursor cursor, int offset) {
        WorkSheetTask entity = new WorkSheetTask( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // sysTaskId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // TaskNo
            cursor.getInt(offset + 2), // BusinessId
            cursor.getInt(offset + 3), // BusinessType
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // sysGridLineID
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // TaskContent
            cursor.getInt(offset + 6), // Status
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // Operator
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // OperationTime
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // Remark
            cursor.getShort(offset + 10) != 0, // Deleted
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // CreatedTime
            cursor.getShort(offset + 12) != 0, // UploadFlag
            cursor.getInt(offset + 13), // DeviceId
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // DeviceNo
            cursor.getInt(offset + 15), // DeviceType
            cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16), // NearDeviceId
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // NearDeviceNo
            cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18), // NearDeviceType
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // CreatedBy
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // CreatedUser
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // Phone
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // LineName
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // ReceiverId
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24) // PlanDailyPlanSectionIDs
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, WorkSheetTask entity, int offset) {
        entity.setSysTaskId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTaskNo(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBusinessId(cursor.getInt(offset + 2));
        entity.setBusinessType(cursor.getInt(offset + 3));
        entity.setSysGridLineID(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setTaskContent(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setStatus(cursor.getInt(offset + 6));
        entity.setOperator(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setOperationTime(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setRemark(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setDeleted(cursor.getShort(offset + 10) != 0);
        entity.setCreatedTime(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setUploadFlag(cursor.getShort(offset + 12) != 0);
        entity.setDeviceId(cursor.getInt(offset + 13));
        entity.setDeviceNo(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setDeviceType(cursor.getInt(offset + 15));
        entity.setNearDeviceId(cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16));
        entity.setNearDeviceNo(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setNearDeviceType(cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18));
        entity.setCreatedBy(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setCreatedUser(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setPhone(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setLineName(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setReceiverId(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setPlanDailyPlanSectionIDs(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(WorkSheetTask entity, long rowId) {
        entity.setSysTaskId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(WorkSheetTask entity) {
        if(entity != null) {
            return entity.getSysTaskId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(WorkSheetTask entity) {
        return entity.getSysTaskId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
