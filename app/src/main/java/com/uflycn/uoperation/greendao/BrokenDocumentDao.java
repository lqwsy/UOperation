package com.uflycn.uoperation.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.uflycn.uoperation.bean.BrokenDocument;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "operation_BrokenDocument".
*/
public class BrokenDocumentDao extends AbstractDao<BrokenDocument, Long> {

    public static final String TABLENAME = "operation_BrokenDocument";

    /**
     * Properties of entity BrokenDocument.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "Id", true, "_id");
        public final static Property SysUserId = new Property(1, String.class, "sysUserId", false, "SYS_USER_ID");
        public final static Property SysTaskId = new Property(2, int.class, "sysTaskId", false, "SYS_TASK_ID");
        public final static Property PlatformId = new Property(3, int.class, "PlatformId", false, "PLATFORM_ID");
        public final static Property StartTowerId = new Property(4, int.class, "StartTowerId", false, "StartTowerId");
        public final static Property EndTowerId = new Property(5, int.class, "EndTowerId", false, "EndTowerId");
        public final static Property BrokenType = new Property(6, String.class, "BrokenType", false, "BrokenType");
        public final static Property DocmentNo = new Property(7, String.class, "DocmentNo", false, "DocumentNo");
        public final static Property Company = new Property(8, String.class, "Company", false, "Company");
        public final static Property ContactPerson = new Property(9, String.class, "ContactPerson", false, "ContactPerson");
        public final static Property PhoneNo = new Property(10, String.class, "PhoneNo", false, "PhoneNo");
        public final static Property BrokenImage = new Property(11, String.class, "BrokenImage", false, "BrokenImage");
        public final static Property VoltageClass = new Property(12, String.class, "VoltageClass", false, "VOLTAGE_CLASS");
        public final static Property Status = new Property(13, int.class, "Status", false, "STATUS");
        public final static Property Remark = new Property(14, String.class, "Remark", false, "REMARK");
        public final static Property CreateDate = new Property(15, String.class, "CreateDate", false, "CREATE_DATE");
        public final static Property UpdateTime = new Property(16, String.class, "UpdateTime", false, "UPDATE_TIME");
        public final static Property LineName = new Property(17, String.class, "LineName", false, "LINE_NAME");
        public final static Property StartTowerNo = new Property(18, String.class, "StartTowerNo", false, "START_TOWER_NO");
        public final static Property EndTowerNo = new Property(19, String.class, "EndTowerNo", false, "END_TOWER_NO");
        public final static Property BrokenTypeName = new Property(20, String.class, "BrokenTypeName", false, "BROKEN_TYPE_NAME");
        public final static Property UploadFlag = new Property(21, int.class, "UploadFlag", false, "UPLOAD_FLAG");
        public final static Property PlanDailyPlanSectionIDs = new Property(22, String.class, "PlanDailyPlanSectionIDs", false, "PLAN_DAILY_PLAN_SECTION_IDS");
        public final static Property SysPatrolExecutionID = new Property(23, String.class, "sysPatrolExecutionID", false, "SYS_PATROL_EXECUTION_ID");
    }


    public BrokenDocumentDao(DaoConfig config) {
        super(config);
    }
    
    public BrokenDocumentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"operation_BrokenDocument\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: Id
                "\"SYS_USER_ID\" TEXT," + // 1: sysUserId
                "\"SYS_TASK_ID\" INTEGER NOT NULL ," + // 2: sysTaskId
                "\"PLATFORM_ID\" INTEGER NOT NULL ," + // 3: PlatformId
                "\"StartTowerId\" INTEGER NOT NULL ," + // 4: StartTowerId
                "\"EndTowerId\" INTEGER NOT NULL ," + // 5: EndTowerId
                "\"BrokenType\" TEXT," + // 6: BrokenType
                "\"DocumentNo\" TEXT," + // 7: DocmentNo
                "\"Company\" TEXT," + // 8: Company
                "\"ContactPerson\" TEXT," + // 9: ContactPerson
                "\"PhoneNo\" TEXT," + // 10: PhoneNo
                "\"BrokenImage\" TEXT," + // 11: BrokenImage
                "\"VOLTAGE_CLASS\" TEXT," + // 12: VoltageClass
                "\"STATUS\" INTEGER NOT NULL ," + // 13: Status
                "\"REMARK\" TEXT," + // 14: Remark
                "\"CREATE_DATE\" TEXT," + // 15: CreateDate
                "\"UPDATE_TIME\" TEXT," + // 16: UpdateTime
                "\"LINE_NAME\" TEXT," + // 17: LineName
                "\"START_TOWER_NO\" TEXT," + // 18: StartTowerNo
                "\"END_TOWER_NO\" TEXT," + // 19: EndTowerNo
                "\"BROKEN_TYPE_NAME\" TEXT," + // 20: BrokenTypeName
                "\"UPLOAD_FLAG\" INTEGER NOT NULL ," + // 21: UploadFlag
                "\"PLAN_DAILY_PLAN_SECTION_IDS\" TEXT," + // 22: PlanDailyPlanSectionIDs
                "\"SYS_PATROL_EXECUTION_ID\" TEXT);"); // 23: sysPatrolExecutionID
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"operation_BrokenDocument\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BrokenDocument entity) {
        stmt.clearBindings();
 
        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(1, Id);
        }
 
        String sysUserId = entity.getSysUserId();
        if (sysUserId != null) {
            stmt.bindString(2, sysUserId);
        }
        stmt.bindLong(3, entity.getSysTaskId());
        stmt.bindLong(4, entity.getPlatformId());
        stmt.bindLong(5, entity.getStartTowerId());
        stmt.bindLong(6, entity.getEndTowerId());
 
        String BrokenType = entity.getBrokenType();
        if (BrokenType != null) {
            stmt.bindString(7, BrokenType);
        }
 
        String DocmentNo = entity.getDocmentNo();
        if (DocmentNo != null) {
            stmt.bindString(8, DocmentNo);
        }
 
        String Company = entity.getCompany();
        if (Company != null) {
            stmt.bindString(9, Company);
        }
 
        String ContactPerson = entity.getContactPerson();
        if (ContactPerson != null) {
            stmt.bindString(10, ContactPerson);
        }
 
        String PhoneNo = entity.getPhoneNo();
        if (PhoneNo != null) {
            stmt.bindString(11, PhoneNo);
        }
 
        String BrokenImage = entity.getBrokenImage();
        if (BrokenImage != null) {
            stmt.bindString(12, BrokenImage);
        }
 
        String VoltageClass = entity.getVoltageClass();
        if (VoltageClass != null) {
            stmt.bindString(13, VoltageClass);
        }
        stmt.bindLong(14, entity.getStatus());
 
        String Remark = entity.getRemark();
        if (Remark != null) {
            stmt.bindString(15, Remark);
        }
 
        String CreateDate = entity.getCreateDate();
        if (CreateDate != null) {
            stmt.bindString(16, CreateDate);
        }
 
        String UpdateTime = entity.getUpdateTime();
        if (UpdateTime != null) {
            stmt.bindString(17, UpdateTime);
        }
 
        String LineName = entity.getLineName();
        if (LineName != null) {
            stmt.bindString(18, LineName);
        }
 
        String StartTowerNo = entity.getStartTowerNo();
        if (StartTowerNo != null) {
            stmt.bindString(19, StartTowerNo);
        }
 
        String EndTowerNo = entity.getEndTowerNo();
        if (EndTowerNo != null) {
            stmt.bindString(20, EndTowerNo);
        }
 
        String BrokenTypeName = entity.getBrokenTypeName();
        if (BrokenTypeName != null) {
            stmt.bindString(21, BrokenTypeName);
        }
        stmt.bindLong(22, entity.getUploadFlag());
 
        String PlanDailyPlanSectionIDs = entity.getPlanDailyPlanSectionIDs();
        if (PlanDailyPlanSectionIDs != null) {
            stmt.bindString(23, PlanDailyPlanSectionIDs);
        }
 
        String sysPatrolExecutionID = entity.getSysPatrolExecutionID();
        if (sysPatrolExecutionID != null) {
            stmt.bindString(24, sysPatrolExecutionID);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BrokenDocument entity) {
        stmt.clearBindings();
 
        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(1, Id);
        }
 
        String sysUserId = entity.getSysUserId();
        if (sysUserId != null) {
            stmt.bindString(2, sysUserId);
        }
        stmt.bindLong(3, entity.getSysTaskId());
        stmt.bindLong(4, entity.getPlatformId());
        stmt.bindLong(5, entity.getStartTowerId());
        stmt.bindLong(6, entity.getEndTowerId());
 
        String BrokenType = entity.getBrokenType();
        if (BrokenType != null) {
            stmt.bindString(7, BrokenType);
        }
 
        String DocmentNo = entity.getDocmentNo();
        if (DocmentNo != null) {
            stmt.bindString(8, DocmentNo);
        }
 
        String Company = entity.getCompany();
        if (Company != null) {
            stmt.bindString(9, Company);
        }
 
        String ContactPerson = entity.getContactPerson();
        if (ContactPerson != null) {
            stmt.bindString(10, ContactPerson);
        }
 
        String PhoneNo = entity.getPhoneNo();
        if (PhoneNo != null) {
            stmt.bindString(11, PhoneNo);
        }
 
        String BrokenImage = entity.getBrokenImage();
        if (BrokenImage != null) {
            stmt.bindString(12, BrokenImage);
        }
 
        String VoltageClass = entity.getVoltageClass();
        if (VoltageClass != null) {
            stmt.bindString(13, VoltageClass);
        }
        stmt.bindLong(14, entity.getStatus());
 
        String Remark = entity.getRemark();
        if (Remark != null) {
            stmt.bindString(15, Remark);
        }
 
        String CreateDate = entity.getCreateDate();
        if (CreateDate != null) {
            stmt.bindString(16, CreateDate);
        }
 
        String UpdateTime = entity.getUpdateTime();
        if (UpdateTime != null) {
            stmt.bindString(17, UpdateTime);
        }
 
        String LineName = entity.getLineName();
        if (LineName != null) {
            stmt.bindString(18, LineName);
        }
 
        String StartTowerNo = entity.getStartTowerNo();
        if (StartTowerNo != null) {
            stmt.bindString(19, StartTowerNo);
        }
 
        String EndTowerNo = entity.getEndTowerNo();
        if (EndTowerNo != null) {
            stmt.bindString(20, EndTowerNo);
        }
 
        String BrokenTypeName = entity.getBrokenTypeName();
        if (BrokenTypeName != null) {
            stmt.bindString(21, BrokenTypeName);
        }
        stmt.bindLong(22, entity.getUploadFlag());
 
        String PlanDailyPlanSectionIDs = entity.getPlanDailyPlanSectionIDs();
        if (PlanDailyPlanSectionIDs != null) {
            stmt.bindString(23, PlanDailyPlanSectionIDs);
        }
 
        String sysPatrolExecutionID = entity.getSysPatrolExecutionID();
        if (sysPatrolExecutionID != null) {
            stmt.bindString(24, sysPatrolExecutionID);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public BrokenDocument readEntity(Cursor cursor, int offset) {
        BrokenDocument entity = new BrokenDocument( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // Id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // sysUserId
            cursor.getInt(offset + 2), // sysTaskId
            cursor.getInt(offset + 3), // PlatformId
            cursor.getInt(offset + 4), // StartTowerId
            cursor.getInt(offset + 5), // EndTowerId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // BrokenType
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // DocmentNo
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // Company
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // ContactPerson
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // PhoneNo
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // BrokenImage
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // VoltageClass
            cursor.getInt(offset + 13), // Status
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // Remark
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // CreateDate
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // UpdateTime
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // LineName
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // StartTowerNo
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // EndTowerNo
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // BrokenTypeName
            cursor.getInt(offset + 21), // UploadFlag
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // PlanDailyPlanSectionIDs
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23) // sysPatrolExecutionID
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BrokenDocument entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSysUserId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSysTaskId(cursor.getInt(offset + 2));
        entity.setPlatformId(cursor.getInt(offset + 3));
        entity.setStartTowerId(cursor.getInt(offset + 4));
        entity.setEndTowerId(cursor.getInt(offset + 5));
        entity.setBrokenType(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDocmentNo(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCompany(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setContactPerson(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPhoneNo(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setBrokenImage(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setVoltageClass(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setStatus(cursor.getInt(offset + 13));
        entity.setRemark(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setCreateDate(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setUpdateTime(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setLineName(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setStartTowerNo(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setEndTowerNo(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setBrokenTypeName(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setUploadFlag(cursor.getInt(offset + 21));
        entity.setPlanDailyPlanSectionIDs(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setSysPatrolExecutionID(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(BrokenDocument entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(BrokenDocument entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BrokenDocument entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
