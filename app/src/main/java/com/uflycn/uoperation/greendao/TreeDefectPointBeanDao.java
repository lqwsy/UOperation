package com.uflycn.uoperation.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.uflycn.uoperation.bean.TreeDefectPointBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "operation_TreeDefect".
*/
public class TreeDefectPointBeanDao extends AbstractDao<TreeDefectPointBean, Long> {

    public static final String TABLENAME = "operation_TreeDefect";

    /**
     * Properties of entity TreeDefectPointBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property SysTreeDefectPointID = new Property(0, Long.class, "sysTreeDefectPointID", true, "sysTreeDefectPointID");
        public final static Property SysTaskId = new Property(1, int.class, "sysTaskId", false, "SYS_TASK_ID");
        public final static Property LineName = new Property(2, String.class, "LineName", false, "LINE_NAME");
        public final static Property VoltageClassName = new Property(3, String.class, "VoltageClassName", false, "VOLTAGE_CLASS_NAME");
        public final static Property TreeDefectPointType = new Property(4, String.class, "TreeDefectPointType", false, "TREE_DEFECT_POINT_TYPE");
        public final static Property TowerA_Name = new Property(5, String.class, "TowerA_Name", false, "TOWER_A__NAME");
        public final static Property TowerB_Name = new Property(6, String.class, "TowerB_Name", false, "TOWER_B__NAME");
        public final static Property TowerRegion = new Property(7, String.class, "TowerRegion", false, "TOWER_REGION");
        public final static Property TowerA_Id = new Property(8, int.class, "TowerA_Id", false, "TOWER_A__ID");
        public final static Property TowerB_Id = new Property(9, int.class, "TowerB_Id", false, "TOWER_B__ID");
        public final static Property DistanceFromTower = new Property(10, double.class, "DistanceFromTower", false, "DISTANCE_FROM_TOWER");
        public final static Property DistanceFromLine = new Property(11, double.class, "DistanceFromLine", false, "DISTANCE_FROM_LINE");
        public final static Property DistanceFromLineH = new Property(12, double.class, "DistanceFromLineH", false, "DISTANCE_FROM_LINE_H");
        public final static Property DistanceFromLineV = new Property(13, double.class, "DistanceFromLineV", false, "DISTANCE_FROM_LINE_V");
        public final static Property Latitude = new Property(14, double.class, "Latitude", false, "LATITUDE");
        public final static Property Longitude = new Property(15, double.class, "Longitude", false, "LONGITUDE");
        public final static Property LatitudeString = new Property(16, String.class, "LatitudeString", false, "LATITUDE_STRING");
        public final static Property LongitudeString = new Property(17, String.class, "LongitudeString", false, "LONGITUDE_STRING");
        public final static Property TreeDefectType = new Property(18, String.class, "TreeDefectType", false, "TREE_DEFECT_TYPE");
        public final static Property Temperature = new Property(19, float.class, "Temperature", false, "TEMPERATURE");
        public final static Property TreeSeed = new Property(20, String.class, "TreeSeed", false, "TREE_SEED");
        public final static Property TreeSeedNumber = new Property(21, String.class, "TreeSeedNumber", false, "TREE_SEED_NUMBER");
        public final static Property DefectStateString = new Property(22, String.class, "DefectStateString", false, "DEFECT_STATE_STRING");
        public final static Property FoundTime = new Property(23, String.class, "FoundTime", false, "FOUND_TIME");
        public final static Property CreatedTime = new Property(24, String.class, "CreatedTime", false, "CREATED_TIME");
        public final static Property Remark = new Property(25, String.class, "Remark", false, "REMARK");
        public final static Property ImageCategory = new Property(26, String.class, "ImageCategory", false, "IMAGE_CATEGORY");
        public final static Property UploadFlag = new Property(27, int.class, "UploadFlag", false, "UPLOAD_FLAG");
        public final static Property Category = new Property(28, String.class, "Category", false, "CATEGORY");
        public final static Property SysApanageTaskId = new Property(29, Integer.class, "sysApanageTaskId", false, "SYS_APANAGE_TASK_ID");
        public final static Property PlanDailyPlanSectionIDs = new Property(30, String.class, "PlanDailyPlanSectionIDs", false, "PLAN_DAILY_PLAN_SECTION_IDS");
    }


    public TreeDefectPointBeanDao(DaoConfig config) {
        super(config);
    }
    
    public TreeDefectPointBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"operation_TreeDefect\" (" + //
                "\"sysTreeDefectPointID\" INTEGER PRIMARY KEY ," + // 0: sysTreeDefectPointID
                "\"SYS_TASK_ID\" INTEGER NOT NULL ," + // 1: sysTaskId
                "\"LINE_NAME\" TEXT," + // 2: LineName
                "\"VOLTAGE_CLASS_NAME\" TEXT," + // 3: VoltageClassName
                "\"TREE_DEFECT_POINT_TYPE\" TEXT," + // 4: TreeDefectPointType
                "\"TOWER_A__NAME\" TEXT," + // 5: TowerA_Name
                "\"TOWER_B__NAME\" TEXT," + // 6: TowerB_Name
                "\"TOWER_REGION\" TEXT," + // 7: TowerRegion
                "\"TOWER_A__ID\" INTEGER NOT NULL ," + // 8: TowerA_Id
                "\"TOWER_B__ID\" INTEGER NOT NULL ," + // 9: TowerB_Id
                "\"DISTANCE_FROM_TOWER\" REAL NOT NULL ," + // 10: DistanceFromTower
                "\"DISTANCE_FROM_LINE\" REAL NOT NULL ," + // 11: DistanceFromLine
                "\"DISTANCE_FROM_LINE_H\" REAL NOT NULL ," + // 12: DistanceFromLineH
                "\"DISTANCE_FROM_LINE_V\" REAL NOT NULL ," + // 13: DistanceFromLineV
                "\"LATITUDE\" REAL NOT NULL ," + // 14: Latitude
                "\"LONGITUDE\" REAL NOT NULL ," + // 15: Longitude
                "\"LATITUDE_STRING\" TEXT," + // 16: LatitudeString
                "\"LONGITUDE_STRING\" TEXT," + // 17: LongitudeString
                "\"TREE_DEFECT_TYPE\" TEXT," + // 18: TreeDefectType
                "\"TEMPERATURE\" REAL NOT NULL ," + // 19: Temperature
                "\"TREE_SEED\" TEXT," + // 20: TreeSeed
                "\"TREE_SEED_NUMBER\" TEXT," + // 21: TreeSeedNumber
                "\"DEFECT_STATE_STRING\" TEXT," + // 22: DefectStateString
                "\"FOUND_TIME\" TEXT," + // 23: FoundTime
                "\"CREATED_TIME\" TEXT," + // 24: CreatedTime
                "\"REMARK\" TEXT," + // 25: Remark
                "\"IMAGE_CATEGORY\" TEXT," + // 26: ImageCategory
                "\"UPLOAD_FLAG\" INTEGER NOT NULL ," + // 27: UploadFlag
                "\"CATEGORY\" TEXT," + // 28: Category
                "\"SYS_APANAGE_TASK_ID\" INTEGER," + // 29: sysApanageTaskId
                "\"PLAN_DAILY_PLAN_SECTION_IDS\" TEXT);"); // 30: PlanDailyPlanSectionIDs
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"operation_TreeDefect\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TreeDefectPointBean entity) {
        stmt.clearBindings();
 
        Long sysTreeDefectPointID = entity.getSysTreeDefectPointID();
        if (sysTreeDefectPointID != null) {
            stmt.bindLong(1, sysTreeDefectPointID);
        }
        stmt.bindLong(2, entity.getSysTaskId());
 
        String LineName = entity.getLineName();
        if (LineName != null) {
            stmt.bindString(3, LineName);
        }
 
        String VoltageClassName = entity.getVoltageClassName();
        if (VoltageClassName != null) {
            stmt.bindString(4, VoltageClassName);
        }
 
        String TreeDefectPointType = entity.getTreeDefectPointType();
        if (TreeDefectPointType != null) {
            stmt.bindString(5, TreeDefectPointType);
        }
 
        String TowerA_Name = entity.getTowerA_Name();
        if (TowerA_Name != null) {
            stmt.bindString(6, TowerA_Name);
        }
 
        String TowerB_Name = entity.getTowerB_Name();
        if (TowerB_Name != null) {
            stmt.bindString(7, TowerB_Name);
        }
 
        String TowerRegion = entity.getTowerRegion();
        if (TowerRegion != null) {
            stmt.bindString(8, TowerRegion);
        }
        stmt.bindLong(9, entity.getTowerA_Id());
        stmt.bindLong(10, entity.getTowerB_Id());
        stmt.bindDouble(11, entity.getDistanceFromTower());
        stmt.bindDouble(12, entity.getDistanceFromLine());
        stmt.bindDouble(13, entity.getDistanceFromLineH());
        stmt.bindDouble(14, entity.getDistanceFromLineV());
        stmt.bindDouble(15, entity.getLatitude());
        stmt.bindDouble(16, entity.getLongitude());
 
        String LatitudeString = entity.getLatitudeString();
        if (LatitudeString != null) {
            stmt.bindString(17, LatitudeString);
        }
 
        String LongitudeString = entity.getLongitudeString();
        if (LongitudeString != null) {
            stmt.bindString(18, LongitudeString);
        }
 
        String TreeDefectType = entity.getTreeDefectType();
        if (TreeDefectType != null) {
            stmt.bindString(19, TreeDefectType);
        }
        stmt.bindDouble(20, entity.getTemperature());
 
        String TreeSeed = entity.getTreeSeed();
        if (TreeSeed != null) {
            stmt.bindString(21, TreeSeed);
        }
 
        String TreeSeedNumber = entity.getTreeSeedNumber();
        if (TreeSeedNumber != null) {
            stmt.bindString(22, TreeSeedNumber);
        }
 
        String DefectStateString = entity.getDefectStateString();
        if (DefectStateString != null) {
            stmt.bindString(23, DefectStateString);
        }
 
        String FoundTime = entity.getFoundTime();
        if (FoundTime != null) {
            stmt.bindString(24, FoundTime);
        }
 
        String CreatedTime = entity.getCreatedTime();
        if (CreatedTime != null) {
            stmt.bindString(25, CreatedTime);
        }
 
        String Remark = entity.getRemark();
        if (Remark != null) {
            stmt.bindString(26, Remark);
        }
 
        String ImageCategory = entity.getImageCategory();
        if (ImageCategory != null) {
            stmt.bindString(27, ImageCategory);
        }
        stmt.bindLong(28, entity.getUploadFlag());
 
        String Category = entity.getCategory();
        if (Category != null) {
            stmt.bindString(29, Category);
        }
 
        Integer sysApanageTaskId = entity.getSysApanageTaskId();
        if (sysApanageTaskId != null) {
            stmt.bindLong(30, sysApanageTaskId);
        }
 
        String PlanDailyPlanSectionIDs = entity.getPlanDailyPlanSectionIDs();
        if (PlanDailyPlanSectionIDs != null) {
            stmt.bindString(31, PlanDailyPlanSectionIDs);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TreeDefectPointBean entity) {
        stmt.clearBindings();
 
        Long sysTreeDefectPointID = entity.getSysTreeDefectPointID();
        if (sysTreeDefectPointID != null) {
            stmt.bindLong(1, sysTreeDefectPointID);
        }
        stmt.bindLong(2, entity.getSysTaskId());
 
        String LineName = entity.getLineName();
        if (LineName != null) {
            stmt.bindString(3, LineName);
        }
 
        String VoltageClassName = entity.getVoltageClassName();
        if (VoltageClassName != null) {
            stmt.bindString(4, VoltageClassName);
        }
 
        String TreeDefectPointType = entity.getTreeDefectPointType();
        if (TreeDefectPointType != null) {
            stmt.bindString(5, TreeDefectPointType);
        }
 
        String TowerA_Name = entity.getTowerA_Name();
        if (TowerA_Name != null) {
            stmt.bindString(6, TowerA_Name);
        }
 
        String TowerB_Name = entity.getTowerB_Name();
        if (TowerB_Name != null) {
            stmt.bindString(7, TowerB_Name);
        }
 
        String TowerRegion = entity.getTowerRegion();
        if (TowerRegion != null) {
            stmt.bindString(8, TowerRegion);
        }
        stmt.bindLong(9, entity.getTowerA_Id());
        stmt.bindLong(10, entity.getTowerB_Id());
        stmt.bindDouble(11, entity.getDistanceFromTower());
        stmt.bindDouble(12, entity.getDistanceFromLine());
        stmt.bindDouble(13, entity.getDistanceFromLineH());
        stmt.bindDouble(14, entity.getDistanceFromLineV());
        stmt.bindDouble(15, entity.getLatitude());
        stmt.bindDouble(16, entity.getLongitude());
 
        String LatitudeString = entity.getLatitudeString();
        if (LatitudeString != null) {
            stmt.bindString(17, LatitudeString);
        }
 
        String LongitudeString = entity.getLongitudeString();
        if (LongitudeString != null) {
            stmt.bindString(18, LongitudeString);
        }
 
        String TreeDefectType = entity.getTreeDefectType();
        if (TreeDefectType != null) {
            stmt.bindString(19, TreeDefectType);
        }
        stmt.bindDouble(20, entity.getTemperature());
 
        String TreeSeed = entity.getTreeSeed();
        if (TreeSeed != null) {
            stmt.bindString(21, TreeSeed);
        }
 
        String TreeSeedNumber = entity.getTreeSeedNumber();
        if (TreeSeedNumber != null) {
            stmt.bindString(22, TreeSeedNumber);
        }
 
        String DefectStateString = entity.getDefectStateString();
        if (DefectStateString != null) {
            stmt.bindString(23, DefectStateString);
        }
 
        String FoundTime = entity.getFoundTime();
        if (FoundTime != null) {
            stmt.bindString(24, FoundTime);
        }
 
        String CreatedTime = entity.getCreatedTime();
        if (CreatedTime != null) {
            stmt.bindString(25, CreatedTime);
        }
 
        String Remark = entity.getRemark();
        if (Remark != null) {
            stmt.bindString(26, Remark);
        }
 
        String ImageCategory = entity.getImageCategory();
        if (ImageCategory != null) {
            stmt.bindString(27, ImageCategory);
        }
        stmt.bindLong(28, entity.getUploadFlag());
 
        String Category = entity.getCategory();
        if (Category != null) {
            stmt.bindString(29, Category);
        }
 
        Integer sysApanageTaskId = entity.getSysApanageTaskId();
        if (sysApanageTaskId != null) {
            stmt.bindLong(30, sysApanageTaskId);
        }
 
        String PlanDailyPlanSectionIDs = entity.getPlanDailyPlanSectionIDs();
        if (PlanDailyPlanSectionIDs != null) {
            stmt.bindString(31, PlanDailyPlanSectionIDs);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TreeDefectPointBean readEntity(Cursor cursor, int offset) {
        TreeDefectPointBean entity = new TreeDefectPointBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // sysTreeDefectPointID
            cursor.getInt(offset + 1), // sysTaskId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // LineName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // VoltageClassName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // TreeDefectPointType
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // TowerA_Name
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // TowerB_Name
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // TowerRegion
            cursor.getInt(offset + 8), // TowerA_Id
            cursor.getInt(offset + 9), // TowerB_Id
            cursor.getDouble(offset + 10), // DistanceFromTower
            cursor.getDouble(offset + 11), // DistanceFromLine
            cursor.getDouble(offset + 12), // DistanceFromLineH
            cursor.getDouble(offset + 13), // DistanceFromLineV
            cursor.getDouble(offset + 14), // Latitude
            cursor.getDouble(offset + 15), // Longitude
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // LatitudeString
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // LongitudeString
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // TreeDefectType
            cursor.getFloat(offset + 19), // Temperature
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // TreeSeed
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // TreeSeedNumber
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // DefectStateString
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // FoundTime
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // CreatedTime
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // Remark
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // ImageCategory
            cursor.getInt(offset + 27), // UploadFlag
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // Category
            cursor.isNull(offset + 29) ? null : cursor.getInt(offset + 29), // sysApanageTaskId
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30) // PlanDailyPlanSectionIDs
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TreeDefectPointBean entity, int offset) {
        entity.setSysTreeDefectPointID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSysTaskId(cursor.getInt(offset + 1));
        entity.setLineName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setVoltageClassName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTreeDefectPointType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTowerA_Name(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTowerB_Name(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTowerRegion(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setTowerA_Id(cursor.getInt(offset + 8));
        entity.setTowerB_Id(cursor.getInt(offset + 9));
        entity.setDistanceFromTower(cursor.getDouble(offset + 10));
        entity.setDistanceFromLine(cursor.getDouble(offset + 11));
        entity.setDistanceFromLineH(cursor.getDouble(offset + 12));
        entity.setDistanceFromLineV(cursor.getDouble(offset + 13));
        entity.setLatitude(cursor.getDouble(offset + 14));
        entity.setLongitude(cursor.getDouble(offset + 15));
        entity.setLatitudeString(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setLongitudeString(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setTreeDefectType(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setTemperature(cursor.getFloat(offset + 19));
        entity.setTreeSeed(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setTreeSeedNumber(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setDefectStateString(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setFoundTime(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setCreatedTime(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setRemark(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setImageCategory(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setUploadFlag(cursor.getInt(offset + 27));
        entity.setCategory(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setSysApanageTaskId(cursor.isNull(offset + 29) ? null : cursor.getInt(offset + 29));
        entity.setPlanDailyPlanSectionIDs(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TreeDefectPointBean entity, long rowId) {
        entity.setSysTreeDefectPointID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TreeDefectPointBean entity) {
        if(entity != null) {
            return entity.getSysTreeDefectPointID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TreeDefectPointBean entity) {
        return entity.getSysTreeDefectPointID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
