package com.uflycn.uoperation.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.uflycn.uoperation.bean.DefectBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "t_TowerDefect".
*/
public class DefectBeanDao extends AbstractDao<DefectBean, Long> {

    public static final String TABLENAME = "t_TowerDefect";

    /**
     * Properties of entity DefectBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property SysTowerDefectId = new Property(1, int.class, "sysTowerDefectId", false, "PlatformId");
        public final static Property SysPhotoInTaskID = new Property(2, int.class, "sysPhotoInTaskID", false, "SYS_PHOTO_IN_TASK_ID");
        public final static Property SysTaskId = new Property(3, int.class, "sysTaskId", false, "SYS_TASK_ID");
        public final static Property TowerNo = new Property(4, String.class, "TowerNo", false, "TOWER_NO");
        public final static Property SysTowerID = new Property(5, int.class, "sysTowerID", false, "SYS_TOWER_ID");
        public final static Property NearTowerNo = new Property(6, String.class, "NearTowerNo", false, "NEAR_TOWER_NO");
        public final static Property NearTowerID = new Property(7, int.class, "NearTowerID", false, "NEAR_TOWER_ID");
        public final static Property HandleAdvise = new Property(8, String.class, "HandleAdvise", false, "HANDLE_ADVISE");
        public final static Property Remark = new Property(9, String.class, "Remark", false, "REMARK");
        public final static Property FoundedTime = new Property(10, String.class, "FoundedTime", false, "FOUNDED_TIME");
        public final static Property Latitude = new Property(11, double.class, "Latitude", false, "LATITUDE");
        public final static Property Longitude = new Property(12, double.class, "Longitude", false, "LONGITUDE");
        public final static Property LineName = new Property(13, String.class, "LineName", false, "LINE_NAME");
        public final static Property ServerityLevel = new Property(14, int.class, "ServerityLevel", false, "SERVERITY_LEVEL");
        public final static Property ServerityLevelString = new Property(15, String.class, "ServerityLevelString", false, "SERVERITY_LEVEL_STRING");
        public final static Property DefectStateString = new Property(16, String.class, "DefectStateString", false, "DEFECT_STATE_STRING");
        public final static Property DefectCategory = new Property(17, String.class, "DefectCategory", false, "DEFECT_CATEGORY");
        public final static Property ImageCategory = new Property(18, String.class, "ImageCategory", false, "IMAGE_CATEGORY");
        public final static Property UploadFlag = new Property(19, int.class, "UploadFlag", false, "UPLOAD_FLAG");
        public final static Property PicturePath = new Property(20, String.class, "PicturePath", false, "PICTURE_PATH");
        public final static Property DefectTypeId = new Property(21, String.class, "DefectTypeId", false, "DEFECT_TYPE_ID");
        public final static Property DefectCategoryString = new Property(22, String.class, "DefectCategoryString", false, "DEFECT_CATEGORY_STRING");
        public final static Property SysApanageTaskId = new Property(23, Integer.class, "sysApanageTaskId", false, "SYS_APANAGE_TASK_ID");
        public final static Property PlanDailyPlanSectionIDs = new Property(24, String.class, "PlanDailyPlanSectionIDs", false, "PLAN_DAILY_PLAN_SECTION_IDS");
        public final static Property SysPatrolExecutionID = new Property(25, String.class, "sysPatrolExecutionID", false, "SYS_PATROL_EXECUTION_ID");
        public final static Property DefectPosition = new Property(26, String.class, "DefectPosition", false, "DEFECT_POSITION");
        public final static Property Phase = new Property(27, String.class, "Phase", false, "PHASE");
    }


    public DefectBeanDao(DaoConfig config) {
        super(config);
    }
    
    public DefectBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"t_TowerDefect\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"PlatformId\" INTEGER NOT NULL ," + // 1: sysTowerDefectId
                "\"SYS_PHOTO_IN_TASK_ID\" INTEGER NOT NULL ," + // 2: sysPhotoInTaskID
                "\"SYS_TASK_ID\" INTEGER NOT NULL ," + // 3: sysTaskId
                "\"TOWER_NO\" TEXT," + // 4: TowerNo
                "\"SYS_TOWER_ID\" INTEGER NOT NULL ," + // 5: sysTowerID
                "\"NEAR_TOWER_NO\" TEXT," + // 6: NearTowerNo
                "\"NEAR_TOWER_ID\" INTEGER NOT NULL ," + // 7: NearTowerID
                "\"HANDLE_ADVISE\" TEXT," + // 8: HandleAdvise
                "\"REMARK\" TEXT," + // 9: Remark
                "\"FOUNDED_TIME\" TEXT," + // 10: FoundedTime
                "\"LATITUDE\" REAL NOT NULL ," + // 11: Latitude
                "\"LONGITUDE\" REAL NOT NULL ," + // 12: Longitude
                "\"LINE_NAME\" TEXT," + // 13: LineName
                "\"SERVERITY_LEVEL\" INTEGER NOT NULL ," + // 14: ServerityLevel
                "\"SERVERITY_LEVEL_STRING\" TEXT," + // 15: ServerityLevelString
                "\"DEFECT_STATE_STRING\" TEXT," + // 16: DefectStateString
                "\"DEFECT_CATEGORY\" TEXT," + // 17: DefectCategory
                "\"IMAGE_CATEGORY\" TEXT," + // 18: ImageCategory
                "\"UPLOAD_FLAG\" INTEGER NOT NULL ," + // 19: UploadFlag
                "\"PICTURE_PATH\" TEXT," + // 20: PicturePath
                "\"DEFECT_TYPE_ID\" TEXT," + // 21: DefectTypeId
                "\"DEFECT_CATEGORY_STRING\" TEXT," + // 22: DefectCategoryString
                "\"SYS_APANAGE_TASK_ID\" INTEGER," + // 23: sysApanageTaskId
                "\"PLAN_DAILY_PLAN_SECTION_IDS\" TEXT," + // 24: PlanDailyPlanSectionIDs
                "\"SYS_PATROL_EXECUTION_ID\" TEXT," + // 25: sysPatrolExecutionID
                "\"DEFECT_POSITION\" TEXT," + // 26: DefectPosition
                "\"PHASE\" TEXT);"); // 27: Phase
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"t_TowerDefect\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DefectBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getSysTowerDefectId());
        stmt.bindLong(3, entity.getSysPhotoInTaskID());
        stmt.bindLong(4, entity.getSysTaskId());
 
        String TowerNo = entity.getTowerNo();
        if (TowerNo != null) {
            stmt.bindString(5, TowerNo);
        }
        stmt.bindLong(6, entity.getSysTowerID());
 
        String NearTowerNo = entity.getNearTowerNo();
        if (NearTowerNo != null) {
            stmt.bindString(7, NearTowerNo);
        }
        stmt.bindLong(8, entity.getNearTowerID());
 
        String HandleAdvise = entity.getHandleAdvise();
        if (HandleAdvise != null) {
            stmt.bindString(9, HandleAdvise);
        }
 
        String Remark = entity.getRemark();
        if (Remark != null) {
            stmt.bindString(10, Remark);
        }
 
        String FoundedTime = entity.getFoundedTime();
        if (FoundedTime != null) {
            stmt.bindString(11, FoundedTime);
        }
        stmt.bindDouble(12, entity.getLatitude());
        stmt.bindDouble(13, entity.getLongitude());
 
        String LineName = entity.getLineName();
        if (LineName != null) {
            stmt.bindString(14, LineName);
        }
        stmt.bindLong(15, entity.getServerityLevel());
 
        String ServerityLevelString = entity.getServerityLevelString();
        if (ServerityLevelString != null) {
            stmt.bindString(16, ServerityLevelString);
        }
 
        String DefectStateString = entity.getDefectStateString();
        if (DefectStateString != null) {
            stmt.bindString(17, DefectStateString);
        }
 
        String DefectCategory = entity.getDefectCategory();
        if (DefectCategory != null) {
            stmt.bindString(18, DefectCategory);
        }
 
        String ImageCategory = entity.getImageCategory();
        if (ImageCategory != null) {
            stmt.bindString(19, ImageCategory);
        }
        stmt.bindLong(20, entity.getUploadFlag());
 
        String PicturePath = entity.getPicturePath();
        if (PicturePath != null) {
            stmt.bindString(21, PicturePath);
        }
 
        String DefectTypeId = entity.getDefectTypeId();
        if (DefectTypeId != null) {
            stmt.bindString(22, DefectTypeId);
        }
 
        String DefectCategoryString = entity.getDefectCategoryString();
        if (DefectCategoryString != null) {
            stmt.bindString(23, DefectCategoryString);
        }
 
        Integer sysApanageTaskId = entity.getSysApanageTaskId();
        if (sysApanageTaskId != null) {
            stmt.bindLong(24, sysApanageTaskId);
        }
 
        String PlanDailyPlanSectionIDs = entity.getPlanDailyPlanSectionIDs();
        if (PlanDailyPlanSectionIDs != null) {
            stmt.bindString(25, PlanDailyPlanSectionIDs);
        }
 
        String sysPatrolExecutionID = entity.getSysPatrolExecutionID();
        if (sysPatrolExecutionID != null) {
            stmt.bindString(26, sysPatrolExecutionID);
        }
 
        String DefectPosition = entity.getDefectPosition();
        if (DefectPosition != null) {
            stmt.bindString(27, DefectPosition);
        }
 
        String Phase = entity.getPhase();
        if (Phase != null) {
            stmt.bindString(28, Phase);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DefectBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getSysTowerDefectId());
        stmt.bindLong(3, entity.getSysPhotoInTaskID());
        stmt.bindLong(4, entity.getSysTaskId());
 
        String TowerNo = entity.getTowerNo();
        if (TowerNo != null) {
            stmt.bindString(5, TowerNo);
        }
        stmt.bindLong(6, entity.getSysTowerID());
 
        String NearTowerNo = entity.getNearTowerNo();
        if (NearTowerNo != null) {
            stmt.bindString(7, NearTowerNo);
        }
        stmt.bindLong(8, entity.getNearTowerID());
 
        String HandleAdvise = entity.getHandleAdvise();
        if (HandleAdvise != null) {
            stmt.bindString(9, HandleAdvise);
        }
 
        String Remark = entity.getRemark();
        if (Remark != null) {
            stmt.bindString(10, Remark);
        }
 
        String FoundedTime = entity.getFoundedTime();
        if (FoundedTime != null) {
            stmt.bindString(11, FoundedTime);
        }
        stmt.bindDouble(12, entity.getLatitude());
        stmt.bindDouble(13, entity.getLongitude());
 
        String LineName = entity.getLineName();
        if (LineName != null) {
            stmt.bindString(14, LineName);
        }
        stmt.bindLong(15, entity.getServerityLevel());
 
        String ServerityLevelString = entity.getServerityLevelString();
        if (ServerityLevelString != null) {
            stmt.bindString(16, ServerityLevelString);
        }
 
        String DefectStateString = entity.getDefectStateString();
        if (DefectStateString != null) {
            stmt.bindString(17, DefectStateString);
        }
 
        String DefectCategory = entity.getDefectCategory();
        if (DefectCategory != null) {
            stmt.bindString(18, DefectCategory);
        }
 
        String ImageCategory = entity.getImageCategory();
        if (ImageCategory != null) {
            stmt.bindString(19, ImageCategory);
        }
        stmt.bindLong(20, entity.getUploadFlag());
 
        String PicturePath = entity.getPicturePath();
        if (PicturePath != null) {
            stmt.bindString(21, PicturePath);
        }
 
        String DefectTypeId = entity.getDefectTypeId();
        if (DefectTypeId != null) {
            stmt.bindString(22, DefectTypeId);
        }
 
        String DefectCategoryString = entity.getDefectCategoryString();
        if (DefectCategoryString != null) {
            stmt.bindString(23, DefectCategoryString);
        }
 
        Integer sysApanageTaskId = entity.getSysApanageTaskId();
        if (sysApanageTaskId != null) {
            stmt.bindLong(24, sysApanageTaskId);
        }
 
        String PlanDailyPlanSectionIDs = entity.getPlanDailyPlanSectionIDs();
        if (PlanDailyPlanSectionIDs != null) {
            stmt.bindString(25, PlanDailyPlanSectionIDs);
        }
 
        String sysPatrolExecutionID = entity.getSysPatrolExecutionID();
        if (sysPatrolExecutionID != null) {
            stmt.bindString(26, sysPatrolExecutionID);
        }
 
        String DefectPosition = entity.getDefectPosition();
        if (DefectPosition != null) {
            stmt.bindString(27, DefectPosition);
        }
 
        String Phase = entity.getPhase();
        if (Phase != null) {
            stmt.bindString(28, Phase);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DefectBean readEntity(Cursor cursor, int offset) {
        DefectBean entity = new DefectBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // sysTowerDefectId
            cursor.getInt(offset + 2), // sysPhotoInTaskID
            cursor.getInt(offset + 3), // sysTaskId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // TowerNo
            cursor.getInt(offset + 5), // sysTowerID
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // NearTowerNo
            cursor.getInt(offset + 7), // NearTowerID
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // HandleAdvise
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // Remark
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // FoundedTime
            cursor.getDouble(offset + 11), // Latitude
            cursor.getDouble(offset + 12), // Longitude
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // LineName
            cursor.getInt(offset + 14), // ServerityLevel
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // ServerityLevelString
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // DefectStateString
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // DefectCategory
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // ImageCategory
            cursor.getInt(offset + 19), // UploadFlag
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // PicturePath
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // DefectTypeId
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // DefectCategoryString
            cursor.isNull(offset + 23) ? null : cursor.getInt(offset + 23), // sysApanageTaskId
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // PlanDailyPlanSectionIDs
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // sysPatrolExecutionID
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // DefectPosition
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27) // Phase
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DefectBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSysTowerDefectId(cursor.getInt(offset + 1));
        entity.setSysPhotoInTaskID(cursor.getInt(offset + 2));
        entity.setSysTaskId(cursor.getInt(offset + 3));
        entity.setTowerNo(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSysTowerID(cursor.getInt(offset + 5));
        entity.setNearTowerNo(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setNearTowerID(cursor.getInt(offset + 7));
        entity.setHandleAdvise(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setRemark(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setFoundedTime(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setLatitude(cursor.getDouble(offset + 11));
        entity.setLongitude(cursor.getDouble(offset + 12));
        entity.setLineName(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setServerityLevel(cursor.getInt(offset + 14));
        entity.setServerityLevelString(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setDefectStateString(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setDefectCategory(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setImageCategory(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setUploadFlag(cursor.getInt(offset + 19));
        entity.setPicturePath(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setDefectTypeId(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setDefectCategoryString(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setSysApanageTaskId(cursor.isNull(offset + 23) ? null : cursor.getInt(offset + 23));
        entity.setPlanDailyPlanSectionIDs(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setSysPatrolExecutionID(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setDefectPosition(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setPhase(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DefectBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DefectBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DefectBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
