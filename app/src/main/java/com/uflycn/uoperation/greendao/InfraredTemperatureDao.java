package com.uflycn.uoperation.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.uflycn.uoperation.bean.InfraredTemperature;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "operation_InfraredTemperature".
*/
public class InfraredTemperatureDao extends AbstractDao<InfraredTemperature, Long> {

    public static final String TABLENAME = "operation_InfraredTemperature";

    /**
     * Properties of entity InfraredTemperature.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "Id", true, "_id");
        public final static Property SysUserId = new Property(1, String.class, "sysUserId", false, "SYS_USER_ID");
        public final static Property SysTowerId = new Property(2, int.class, "sysTowerId", false, "SYS_TOWER_ID");
        public final static Property NearTowerId = new Property(3, Integer.class, "NearTowerId", false, "NEAR_TOWER_ID");
        public final static Property Wireway = new Property(4, double.class, "Wireway", false, "WIREWAY");
        public final static Property EnvTemperature = new Property(5, double.class, "EnvTemperature", false, "ENV_TEMPERATURE");
        public final static Property IsThreeCross = new Property(6, boolean.class, "IsThreeCross", false, "IS_THREE_CROSS");
        public final static Property JointType = new Property(7, Integer.class, "JointType", false, "JOINT_TYPE");
        public final static Property WirewayType = new Property(8, Integer.class, "WirewayType", false, "WIREWAY_TYPE");
        public final static Property CreateDate = new Property(9, String.class, "CreateDate", false, "CREATE_DATE");
        public final static Property LoopType = new Property(10, String.class, "LoopType", false, "LOOP_TYPE");
        public final static Property Qualified = new Property(11, int.class, "Qualified", false, "QUALIFIED");
        public final static Property UploadFlag = new Property(12, int.class, "UploadFlag", false, "UPLOAD_FLAG");
        public final static Property PlanDailyPlanSectionIDs = new Property(13, String.class, "PlanDailyPlanSectionIDs", false, "PLAN_DAILY_PLAN_SECTION_IDS");
        public final static Property SysPatrolExecutionID = new Property(14, String.class, "sysPatrolExecutionID", false, "SYS_PATROL_EXECUTION_ID");
    }

    private DaoSession daoSession;


    public InfraredTemperatureDao(DaoConfig config) {
        super(config);
    }
    
    public InfraredTemperatureDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"operation_InfraredTemperature\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: Id
                "\"SYS_USER_ID\" TEXT," + // 1: sysUserId
                "\"SYS_TOWER_ID\" INTEGER NOT NULL ," + // 2: sysTowerId
                "\"NEAR_TOWER_ID\" INTEGER," + // 3: NearTowerId
                "\"WIREWAY\" REAL NOT NULL ," + // 4: Wireway
                "\"ENV_TEMPERATURE\" REAL NOT NULL ," + // 5: EnvTemperature
                "\"IS_THREE_CROSS\" INTEGER NOT NULL ," + // 6: IsThreeCross
                "\"JOINT_TYPE\" INTEGER," + // 7: JointType
                "\"WIREWAY_TYPE\" INTEGER," + // 8: WirewayType
                "\"CREATE_DATE\" TEXT," + // 9: CreateDate
                "\"LOOP_TYPE\" TEXT," + // 10: LoopType
                "\"QUALIFIED\" INTEGER NOT NULL ," + // 11: Qualified
                "\"UPLOAD_FLAG\" INTEGER NOT NULL ," + // 12: UploadFlag
                "\"PLAN_DAILY_PLAN_SECTION_IDS\" TEXT," + // 13: PlanDailyPlanSectionIDs
                "\"SYS_PATROL_EXECUTION_ID\" TEXT);"); // 14: sysPatrolExecutionID
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"operation_InfraredTemperature\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, InfraredTemperature entity) {
        stmt.clearBindings();
 
        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(1, Id);
        }
 
        String sysUserId = entity.getSysUserId();
        if (sysUserId != null) {
            stmt.bindString(2, sysUserId);
        }
        stmt.bindLong(3, entity.getSysTowerId());
 
        Integer NearTowerId = entity.getNearTowerId();
        if (NearTowerId != null) {
            stmt.bindLong(4, NearTowerId);
        }
        stmt.bindDouble(5, entity.getWireway());
        stmt.bindDouble(6, entity.getEnvTemperature());
        stmt.bindLong(7, entity.getIsThreeCross() ? 1L: 0L);
 
        Integer JointType = entity.getJointType();
        if (JointType != null) {
            stmt.bindLong(8, JointType);
        }
 
        Integer WirewayType = entity.getWirewayType();
        if (WirewayType != null) {
            stmt.bindLong(9, WirewayType);
        }
 
        String CreateDate = entity.getCreateDate();
        if (CreateDate != null) {
            stmt.bindString(10, CreateDate);
        }
 
        String LoopType = entity.getLoopType();
        if (LoopType != null) {
            stmt.bindString(11, LoopType);
        }
        stmt.bindLong(12, entity.getQualified());
        stmt.bindLong(13, entity.getUploadFlag());
 
        String PlanDailyPlanSectionIDs = entity.getPlanDailyPlanSectionIDs();
        if (PlanDailyPlanSectionIDs != null) {
            stmt.bindString(14, PlanDailyPlanSectionIDs);
        }
 
        String sysPatrolExecutionID = entity.getSysPatrolExecutionID();
        if (sysPatrolExecutionID != null) {
            stmt.bindString(15, sysPatrolExecutionID);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, InfraredTemperature entity) {
        stmt.clearBindings();
 
        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(1, Id);
        }
 
        String sysUserId = entity.getSysUserId();
        if (sysUserId != null) {
            stmt.bindString(2, sysUserId);
        }
        stmt.bindLong(3, entity.getSysTowerId());
 
        Integer NearTowerId = entity.getNearTowerId();
        if (NearTowerId != null) {
            stmt.bindLong(4, NearTowerId);
        }
        stmt.bindDouble(5, entity.getWireway());
        stmt.bindDouble(6, entity.getEnvTemperature());
        stmt.bindLong(7, entity.getIsThreeCross() ? 1L: 0L);
 
        Integer JointType = entity.getJointType();
        if (JointType != null) {
            stmt.bindLong(8, JointType);
        }
 
        Integer WirewayType = entity.getWirewayType();
        if (WirewayType != null) {
            stmt.bindLong(9, WirewayType);
        }
 
        String CreateDate = entity.getCreateDate();
        if (CreateDate != null) {
            stmt.bindString(10, CreateDate);
        }
 
        String LoopType = entity.getLoopType();
        if (LoopType != null) {
            stmt.bindString(11, LoopType);
        }
        stmt.bindLong(12, entity.getQualified());
        stmt.bindLong(13, entity.getUploadFlag());
 
        String PlanDailyPlanSectionIDs = entity.getPlanDailyPlanSectionIDs();
        if (PlanDailyPlanSectionIDs != null) {
            stmt.bindString(14, PlanDailyPlanSectionIDs);
        }
 
        String sysPatrolExecutionID = entity.getSysPatrolExecutionID();
        if (sysPatrolExecutionID != null) {
            stmt.bindString(15, sysPatrolExecutionID);
        }
    }

    @Override
    protected final void attachEntity(InfraredTemperature entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public InfraredTemperature readEntity(Cursor cursor, int offset) {
        InfraredTemperature entity = new InfraredTemperature( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // Id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // sysUserId
            cursor.getInt(offset + 2), // sysTowerId
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // NearTowerId
            cursor.getDouble(offset + 4), // Wireway
            cursor.getDouble(offset + 5), // EnvTemperature
            cursor.getShort(offset + 6) != 0, // IsThreeCross
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // JointType
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // WirewayType
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // CreateDate
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // LoopType
            cursor.getInt(offset + 11), // Qualified
            cursor.getInt(offset + 12), // UploadFlag
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // PlanDailyPlanSectionIDs
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14) // sysPatrolExecutionID
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, InfraredTemperature entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSysUserId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSysTowerId(cursor.getInt(offset + 2));
        entity.setNearTowerId(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setWireway(cursor.getDouble(offset + 4));
        entity.setEnvTemperature(cursor.getDouble(offset + 5));
        entity.setIsThreeCross(cursor.getShort(offset + 6) != 0);
        entity.setJointType(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setWirewayType(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setCreateDate(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setLoopType(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setQualified(cursor.getInt(offset + 11));
        entity.setUploadFlag(cursor.getInt(offset + 12));
        entity.setPlanDailyPlanSectionIDs(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setSysPatrolExecutionID(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(InfraredTemperature entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(InfraredTemperature entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(InfraredTemperature entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
