package com.uflycn.uoperation.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.uflycn.uoperation.bean.ImagePaths;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "operation_ImagePaths".
*/
public class ImagePathsDao extends AbstractDao<ImagePaths, Long> {

    public static final String TABLENAME = "operation_ImagePaths";

    /**
     * Properties of entity ImagePaths.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "Id", true, "_id");
        public final static Property Category = new Property(1, int.class, "Category", false, "CATEGORY");
        public final static Property LocalId = new Property(2, String.class, "LocalId", false, "LOCAL_ID");
        public final static Property FatherPlatformId = new Property(3, String.class, "fatherPlatformId", false, "FATHER_PLATFORM_ID");
        public final static Property Path = new Property(4, String.class, "Path", false, "PATH");
    }


    public ImagePathsDao(DaoConfig config) {
        super(config);
    }
    
    public ImagePathsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"operation_ImagePaths\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: Id
                "\"CATEGORY\" INTEGER NOT NULL ," + // 1: Category
                "\"LOCAL_ID\" TEXT," + // 2: LocalId
                "\"FATHER_PLATFORM_ID\" TEXT," + // 3: fatherPlatformId
                "\"PATH\" TEXT);"); // 4: Path
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"operation_ImagePaths\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ImagePaths entity) {
        stmt.clearBindings();
 
        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(1, Id);
        }
        stmt.bindLong(2, entity.getCategory());
 
        String LocalId = entity.getLocalId();
        if (LocalId != null) {
            stmt.bindString(3, LocalId);
        }
 
        String fatherPlatformId = entity.getFatherPlatformId();
        if (fatherPlatformId != null) {
            stmt.bindString(4, fatherPlatformId);
        }
 
        String Path = entity.getPath();
        if (Path != null) {
            stmt.bindString(5, Path);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ImagePaths entity) {
        stmt.clearBindings();
 
        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(1, Id);
        }
        stmt.bindLong(2, entity.getCategory());
 
        String LocalId = entity.getLocalId();
        if (LocalId != null) {
            stmt.bindString(3, LocalId);
        }
 
        String fatherPlatformId = entity.getFatherPlatformId();
        if (fatherPlatformId != null) {
            stmt.bindString(4, fatherPlatformId);
        }
 
        String Path = entity.getPath();
        if (Path != null) {
            stmt.bindString(5, Path);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ImagePaths readEntity(Cursor cursor, int offset) {
        ImagePaths entity = new ImagePaths( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // Id
            cursor.getInt(offset + 1), // Category
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // LocalId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // fatherPlatformId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // Path
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ImagePaths entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCategory(cursor.getInt(offset + 1));
        entity.setLocalId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFatherPlatformId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPath(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ImagePaths entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ImagePaths entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ImagePaths entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
