package com.uflycn.uoperation.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.uflycn.uoperation.bean.Document;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "operation_TransmissionDocument".
*/
public class DocumentDao extends AbstractDao<Document, Long> {

    public static final String TABLENAME = "operation_TransmissionDocument";

    /**
     * Properties of entity Document.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property SysTechnicalFileId = new Property(0, Long.class, "sysTechnicalFileId", true, "_id");
        public final static Property FileName = new Property(1, String.class, "FileName", false, "FILE_NAME");
        public final static Property Introduction = new Property(2, String.class, "Introduction", false, "INTRODUCTION");
        public final static Property FileSize = new Property(3, String.class, "FileSize", false, "FILE_SIZE");
        public final static Property Extensions = new Property(4, String.class, "Extensions", false, "EXTENSIONS");
        public final static Property CreatedTime = new Property(5, String.class, "CreatedTime", false, "CREATED_TIME");
        public final static Property CreatedBy = new Property(6, String.class, "CreatedBy", false, "CREATED_BY");
        public final static Property SysFileInfoId = new Property(7, int.class, "sysFileInfoId", false, "SYS_FILE_INFO_ID");
        public final static Property FilePath = new Property(8, String.class, "FilePath", false, "FILE_PATH");
        public final static Property PlanDailyPlanSectionIDs = new Property(9, String.class, "PlanDailyPlanSectionIDs", false, "PLAN_DAILY_PLAN_SECTION_IDS");
    }


    public DocumentDao(DaoConfig config) {
        super(config);
    }
    
    public DocumentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"operation_TransmissionDocument\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: sysTechnicalFileId
                "\"FILE_NAME\" TEXT," + // 1: FileName
                "\"INTRODUCTION\" TEXT," + // 2: Introduction
                "\"FILE_SIZE\" TEXT," + // 3: FileSize
                "\"EXTENSIONS\" TEXT," + // 4: Extensions
                "\"CREATED_TIME\" TEXT," + // 5: CreatedTime
                "\"CREATED_BY\" TEXT," + // 6: CreatedBy
                "\"SYS_FILE_INFO_ID\" INTEGER NOT NULL ," + // 7: sysFileInfoId
                "\"FILE_PATH\" TEXT," + // 8: FilePath
                "\"PLAN_DAILY_PLAN_SECTION_IDS\" TEXT);"); // 9: PlanDailyPlanSectionIDs
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"operation_TransmissionDocument\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Document entity) {
        stmt.clearBindings();
 
        Long sysTechnicalFileId = entity.getSysTechnicalFileId();
        if (sysTechnicalFileId != null) {
            stmt.bindLong(1, sysTechnicalFileId);
        }
 
        String FileName = entity.getFileName();
        if (FileName != null) {
            stmt.bindString(2, FileName);
        }
 
        String Introduction = entity.getIntroduction();
        if (Introduction != null) {
            stmt.bindString(3, Introduction);
        }
 
        String FileSize = entity.getFileSize();
        if (FileSize != null) {
            stmt.bindString(4, FileSize);
        }
 
        String Extensions = entity.getExtensions();
        if (Extensions != null) {
            stmt.bindString(5, Extensions);
        }
 
        String CreatedTime = entity.getCreatedTime();
        if (CreatedTime != null) {
            stmt.bindString(6, CreatedTime);
        }
 
        String CreatedBy = entity.getCreatedBy();
        if (CreatedBy != null) {
            stmt.bindString(7, CreatedBy);
        }
        stmt.bindLong(8, entity.getSysFileInfoId());
 
        String FilePath = entity.getFilePath();
        if (FilePath != null) {
            stmt.bindString(9, FilePath);
        }
 
        String PlanDailyPlanSectionIDs = entity.getPlanDailyPlanSectionIDs();
        if (PlanDailyPlanSectionIDs != null) {
            stmt.bindString(10, PlanDailyPlanSectionIDs);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Document entity) {
        stmt.clearBindings();
 
        Long sysTechnicalFileId = entity.getSysTechnicalFileId();
        if (sysTechnicalFileId != null) {
            stmt.bindLong(1, sysTechnicalFileId);
        }
 
        String FileName = entity.getFileName();
        if (FileName != null) {
            stmt.bindString(2, FileName);
        }
 
        String Introduction = entity.getIntroduction();
        if (Introduction != null) {
            stmt.bindString(3, Introduction);
        }
 
        String FileSize = entity.getFileSize();
        if (FileSize != null) {
            stmt.bindString(4, FileSize);
        }
 
        String Extensions = entity.getExtensions();
        if (Extensions != null) {
            stmt.bindString(5, Extensions);
        }
 
        String CreatedTime = entity.getCreatedTime();
        if (CreatedTime != null) {
            stmt.bindString(6, CreatedTime);
        }
 
        String CreatedBy = entity.getCreatedBy();
        if (CreatedBy != null) {
            stmt.bindString(7, CreatedBy);
        }
        stmt.bindLong(8, entity.getSysFileInfoId());
 
        String FilePath = entity.getFilePath();
        if (FilePath != null) {
            stmt.bindString(9, FilePath);
        }
 
        String PlanDailyPlanSectionIDs = entity.getPlanDailyPlanSectionIDs();
        if (PlanDailyPlanSectionIDs != null) {
            stmt.bindString(10, PlanDailyPlanSectionIDs);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Document readEntity(Cursor cursor, int offset) {
        Document entity = new Document( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // sysTechnicalFileId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // FileName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Introduction
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // FileSize
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // Extensions
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // CreatedTime
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // CreatedBy
            cursor.getInt(offset + 7), // sysFileInfoId
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // FilePath
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // PlanDailyPlanSectionIDs
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Document entity, int offset) {
        entity.setSysTechnicalFileId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFileName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIntroduction(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFileSize(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setExtensions(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCreatedTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCreatedBy(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSysFileInfoId(cursor.getInt(offset + 7));
        entity.setFilePath(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPlanDailyPlanSectionIDs(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Document entity, long rowId) {
        entity.setSysTechnicalFileId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Document entity) {
        if(entity != null) {
            return entity.getSysTechnicalFileId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Document entity) {
        return entity.getSysTechnicalFileId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
