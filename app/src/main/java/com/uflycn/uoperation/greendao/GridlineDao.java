package com.uflycn.uoperation.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.uflycn.uoperation.bean.Gridline;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "t_GridLine".
*/
public class GridlineDao extends AbstractDao<Gridline, Long> {

    public static final String TABLENAME = "t_GridLine";

    /**
     * Properties of entity Gridline.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property SysGridLineID = new Property(0, Long.class, "sysGridLineID", true, "_id");
        public final static Property LineName = new Property(1, String.class, "LineName", false, "LINE_NAME");
        public final static Property VoltageClass = new Property(2, String.class, "VoltageClass", false, "VOLTAGE_CLASS");
        public final static Property MaintainClass = new Property(3, String.class, "MaintainClass", false, "MAINTAIN_CLASS");
        public final static Property MaintainUser = new Property(4, String.class, "MaintainUser", false, "MAINTAIN_USER");
        public final static Property TowerCount = new Property(5, int.class, "TowerCount", false, "TOWER_COUNT");
        public final static Property LineLength = new Property(6, double.class, "LineLength", false, "LINE_LENGTH");
        public final static Property Deleted = new Property(7, boolean.class, "Deleted", false, "DELETED");
    }


    public GridlineDao(DaoConfig config) {
        super(config);
    }
    
    public GridlineDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"t_GridLine\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: sysGridLineID
                "\"LINE_NAME\" TEXT," + // 1: LineName
                "\"VOLTAGE_CLASS\" TEXT," + // 2: VoltageClass
                "\"MAINTAIN_CLASS\" TEXT," + // 3: MaintainClass
                "\"MAINTAIN_USER\" TEXT," + // 4: MaintainUser
                "\"TOWER_COUNT\" INTEGER NOT NULL ," + // 5: TowerCount
                "\"LINE_LENGTH\" REAL NOT NULL ," + // 6: LineLength
                "\"DELETED\" INTEGER NOT NULL );"); // 7: Deleted
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"t_GridLine\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Gridline entity) {
        stmt.clearBindings();
 
        Long sysGridLineID = entity.getSysGridLineID();
        if (sysGridLineID != null) {
            stmt.bindLong(1, sysGridLineID);
        }
 
        String LineName = entity.getLineName();
        if (LineName != null) {
            stmt.bindString(2, LineName);
        }
 
        String VoltageClass = entity.getVoltageClass();
        if (VoltageClass != null) {
            stmt.bindString(3, VoltageClass);
        }
 
        String MaintainClass = entity.getMaintainClass();
        if (MaintainClass != null) {
            stmt.bindString(4, MaintainClass);
        }
 
        String MaintainUser = entity.getMaintainUser();
        if (MaintainUser != null) {
            stmt.bindString(5, MaintainUser);
        }
        stmt.bindLong(6, entity.getTowerCount());
        stmt.bindDouble(7, entity.getLineLength());
        stmt.bindLong(8, entity.getDeleted() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Gridline entity) {
        stmt.clearBindings();
 
        Long sysGridLineID = entity.getSysGridLineID();
        if (sysGridLineID != null) {
            stmt.bindLong(1, sysGridLineID);
        }
 
        String LineName = entity.getLineName();
        if (LineName != null) {
            stmt.bindString(2, LineName);
        }
 
        String VoltageClass = entity.getVoltageClass();
        if (VoltageClass != null) {
            stmt.bindString(3, VoltageClass);
        }
 
        String MaintainClass = entity.getMaintainClass();
        if (MaintainClass != null) {
            stmt.bindString(4, MaintainClass);
        }
 
        String MaintainUser = entity.getMaintainUser();
        if (MaintainUser != null) {
            stmt.bindString(5, MaintainUser);
        }
        stmt.bindLong(6, entity.getTowerCount());
        stmt.bindDouble(7, entity.getLineLength());
        stmt.bindLong(8, entity.getDeleted() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Gridline readEntity(Cursor cursor, int offset) {
        Gridline entity = new Gridline( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // sysGridLineID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // LineName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // VoltageClass
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // MaintainClass
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // MaintainUser
            cursor.getInt(offset + 5), // TowerCount
            cursor.getDouble(offset + 6), // LineLength
            cursor.getShort(offset + 7) != 0 // Deleted
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Gridline entity, int offset) {
        entity.setSysGridLineID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLineName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setVoltageClass(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMaintainClass(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMaintainUser(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTowerCount(cursor.getInt(offset + 5));
        entity.setLineLength(cursor.getDouble(offset + 6));
        entity.setDeleted(cursor.getShort(offset + 7) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Gridline entity, long rowId) {
        entity.setSysGridLineID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Gridline entity) {
        if(entity != null) {
            return entity.getSysGridLineID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Gridline entity) {
        return entity.getSysGridLineID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
