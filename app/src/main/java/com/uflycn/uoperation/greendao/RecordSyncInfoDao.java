package com.uflycn.uoperation.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.uflycn.uoperation.bean.RecordSyncInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "t_RecordSyncInfo".
*/
public class RecordSyncInfoDao extends AbstractDao<RecordSyncInfo, Long> {

    public static final String TABLENAME = "t_RecordSyncInfo";

    /**
     * Properties of entity RecordSyncInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property SysRecordSyncInfoId = new Property(0, Long.class, "sysRecordSyncInfoId", true, "_id");
        public final static Property Category = new Property(1, int.class, "Category", false, "CATEGORY");
        public final static Property LastSyncTime = new Property(2, String.class, "LastSyncTime", false, "LAST_SYNC_TIME");
    }


    public RecordSyncInfoDao(DaoConfig config) {
        super(config);
    }
    
    public RecordSyncInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"t_RecordSyncInfo\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: sysRecordSyncInfoId
                "\"CATEGORY\" INTEGER NOT NULL ," + // 1: Category
                "\"LAST_SYNC_TIME\" TEXT);"); // 2: LastSyncTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"t_RecordSyncInfo\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RecordSyncInfo entity) {
        stmt.clearBindings();
 
        Long sysRecordSyncInfoId = entity.getSysRecordSyncInfoId();
        if (sysRecordSyncInfoId != null) {
            stmt.bindLong(1, sysRecordSyncInfoId);
        }
        stmt.bindLong(2, entity.getCategory());
 
        String LastSyncTime = entity.getLastSyncTime();
        if (LastSyncTime != null) {
            stmt.bindString(3, LastSyncTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RecordSyncInfo entity) {
        stmt.clearBindings();
 
        Long sysRecordSyncInfoId = entity.getSysRecordSyncInfoId();
        if (sysRecordSyncInfoId != null) {
            stmt.bindLong(1, sysRecordSyncInfoId);
        }
        stmt.bindLong(2, entity.getCategory());
 
        String LastSyncTime = entity.getLastSyncTime();
        if (LastSyncTime != null) {
            stmt.bindString(3, LastSyncTime);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public RecordSyncInfo readEntity(Cursor cursor, int offset) {
        RecordSyncInfo entity = new RecordSyncInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // sysRecordSyncInfoId
            cursor.getInt(offset + 1), // Category
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // LastSyncTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, RecordSyncInfo entity, int offset) {
        entity.setSysRecordSyncInfoId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCategory(cursor.getInt(offset + 1));
        entity.setLastSyncTime(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(RecordSyncInfo entity, long rowId) {
        entity.setSysRecordSyncInfoId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(RecordSyncInfo entity) {
        if(entity != null) {
            return entity.getSysRecordSyncInfoId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(RecordSyncInfo entity) {
        return entity.getSysRecordSyncInfoId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
