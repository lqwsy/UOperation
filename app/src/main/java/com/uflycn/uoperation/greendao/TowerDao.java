package com.uflycn.uoperation.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.uflycn.uoperation.bean.Tower;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "t_Tower".
*/
public class TowerDao extends AbstractDao<Tower, Long> {

    public static final String TABLENAME = "t_Tower";

    /**
     * Properties of entity Tower.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property SysTowerID = new Property(0, Long.class, "sysTowerID", true, "_id");
        public final static Property SysGridLineId = new Property(1, int.class, "sysGridLineId", false, "SYS_GRID_LINE_ID");
        public final static Property TowerType = new Property(2, String.class, "TowerType", false, "TOWER_TYPE");
        public final static Property TowerNo = new Property(3, String.class, "TowerNo", false, "TOWER_NO");
        public final static Property TowerAssetsCode = new Property(4, String.class, "TowerAssetsCode", false, "TOWER_ASSETS_CODE");
        public final static Property TowerAltitude = new Property(5, String.class, "TowerAltitude", false, "TOWER_ALTITUDE");
        public final static Property Latitude = new Property(6, double.class, "Latitude", false, "LATITUDE");
        public final static Property Longitude = new Property(7, double.class, "Longitude", false, "LONGITUDE");
        public final static Property HeadAltitude = new Property(8, String.class, "HeadAltitude", false, "HEAD_ALTITUDE");
        public final static Property Altitude = new Property(9, double.class, "Altitude", false, "ALTITUDE");
        public final static Property DisplayOrder = new Property(10, int.class, "DisplayOrder", false, "DISPLAY_ORDER");
        public final static Property Deleted = new Property(11, boolean.class, "Deleted", false, "DELETED");
    }


    public TowerDao(DaoConfig config) {
        super(config);
    }
    
    public TowerDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"t_Tower\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: sysTowerID
                "\"SYS_GRID_LINE_ID\" INTEGER NOT NULL ," + // 1: sysGridLineId
                "\"TOWER_TYPE\" TEXT," + // 2: TowerType
                "\"TOWER_NO\" TEXT," + // 3: TowerNo
                "\"TOWER_ASSETS_CODE\" TEXT," + // 4: TowerAssetsCode
                "\"TOWER_ALTITUDE\" TEXT," + // 5: TowerAltitude
                "\"LATITUDE\" REAL NOT NULL ," + // 6: Latitude
                "\"LONGITUDE\" REAL NOT NULL ," + // 7: Longitude
                "\"HEAD_ALTITUDE\" TEXT," + // 8: HeadAltitude
                "\"ALTITUDE\" REAL NOT NULL ," + // 9: Altitude
                "\"DISPLAY_ORDER\" INTEGER NOT NULL ," + // 10: DisplayOrder
                "\"DELETED\" INTEGER NOT NULL );"); // 11: Deleted
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"t_Tower\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Tower entity) {
        stmt.clearBindings();
 
        Long sysTowerID = entity.getSysTowerID();
        if (sysTowerID != null) {
            stmt.bindLong(1, sysTowerID);
        }
        stmt.bindLong(2, entity.getSysGridLineId());
 
        String TowerType = entity.getTowerType();
        if (TowerType != null) {
            stmt.bindString(3, TowerType);
        }
 
        String TowerNo = entity.getTowerNo();
        if (TowerNo != null) {
            stmt.bindString(4, TowerNo);
        }
 
        String TowerAssetsCode = entity.getTowerAssetsCode();
        if (TowerAssetsCode != null) {
            stmt.bindString(5, TowerAssetsCode);
        }
 
        String TowerAltitude = entity.getTowerAltitude();
        if (TowerAltitude != null) {
            stmt.bindString(6, TowerAltitude);
        }
        stmt.bindDouble(7, entity.getLatitude());
        stmt.bindDouble(8, entity.getLongitude());
 
        String HeadAltitude = entity.getHeadAltitude();
        if (HeadAltitude != null) {
            stmt.bindString(9, HeadAltitude);
        }
        stmt.bindDouble(10, entity.getAltitude());
        stmt.bindLong(11, entity.getDisplayOrder());
        stmt.bindLong(12, entity.getDeleted() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Tower entity) {
        stmt.clearBindings();
 
        Long sysTowerID = entity.getSysTowerID();
        if (sysTowerID != null) {
            stmt.bindLong(1, sysTowerID);
        }
        stmt.bindLong(2, entity.getSysGridLineId());
 
        String TowerType = entity.getTowerType();
        if (TowerType != null) {
            stmt.bindString(3, TowerType);
        }
 
        String TowerNo = entity.getTowerNo();
        if (TowerNo != null) {
            stmt.bindString(4, TowerNo);
        }
 
        String TowerAssetsCode = entity.getTowerAssetsCode();
        if (TowerAssetsCode != null) {
            stmt.bindString(5, TowerAssetsCode);
        }
 
        String TowerAltitude = entity.getTowerAltitude();
        if (TowerAltitude != null) {
            stmt.bindString(6, TowerAltitude);
        }
        stmt.bindDouble(7, entity.getLatitude());
        stmt.bindDouble(8, entity.getLongitude());
 
        String HeadAltitude = entity.getHeadAltitude();
        if (HeadAltitude != null) {
            stmt.bindString(9, HeadAltitude);
        }
        stmt.bindDouble(10, entity.getAltitude());
        stmt.bindLong(11, entity.getDisplayOrder());
        stmt.bindLong(12, entity.getDeleted() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Tower readEntity(Cursor cursor, int offset) {
        Tower entity = new Tower( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // sysTowerID
            cursor.getInt(offset + 1), // sysGridLineId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // TowerType
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // TowerNo
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // TowerAssetsCode
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // TowerAltitude
            cursor.getDouble(offset + 6), // Latitude
            cursor.getDouble(offset + 7), // Longitude
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // HeadAltitude
            cursor.getDouble(offset + 9), // Altitude
            cursor.getInt(offset + 10), // DisplayOrder
            cursor.getShort(offset + 11) != 0 // Deleted
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Tower entity, int offset) {
        entity.setSysTowerID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSysGridLineId(cursor.getInt(offset + 1));
        entity.setTowerType(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTowerNo(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTowerAssetsCode(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTowerAltitude(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLatitude(cursor.getDouble(offset + 6));
        entity.setLongitude(cursor.getDouble(offset + 7));
        entity.setHeadAltitude(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setAltitude(cursor.getDouble(offset + 9));
        entity.setDisplayOrder(cursor.getInt(offset + 10));
        entity.setDeleted(cursor.getShort(offset + 11) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Tower entity, long rowId) {
        entity.setSysTowerID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Tower entity) {
        if(entity != null) {
            return entity.getSysTowerID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Tower entity) {
        return entity.getSysTowerID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
