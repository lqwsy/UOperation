package com.uflycn.uoperation.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.uflycn.uoperation.bean.Organizition;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "t_Organizition".
*/
public class OrganizitionDao extends AbstractDao<Organizition, String> {

    public static final String TABLENAME = "t_Organizition";

    /**
     * Properties of entity Organizition.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property OrganizationId = new Property(0, String.class, "OrganizationId", true, "OrganizationId");
        public final static Property ParentId = new Property(1, String.class, "ParentId", false, "PARENT_ID");
        public final static Property Code = new Property(2, String.class, "Code", false, "CODE");
        public final static Property ShortName = new Property(3, String.class, "ShortName", false, "SHORT_NAME");
        public final static Property FullName = new Property(4, String.class, "FullName", false, "FULL_NAME");
        public final static Property Description = new Property(5, String.class, "Description", false, "DESCRIPTION");
        public final static Property Enabled = new Property(6, int.class, "Enabled", false, "ENABLED");
        public final static Property SortCode = new Property(7, int.class, "SortCode", false, "SORT_CODE");
        public final static Property DeleteMark = new Property(8, int.class, "DeleteMark", false, "DELETE_MARK");
        public final static Property Manager = new Property(9, String.class, "Manager", false, "MANAGER");
        public final static Property ManagerName = new Property(10, String.class, "ManagerName", false, "MANAGER_NAME");
        public final static Property AssistantManager = new Property(11, String.class, "AssistantManager", false, "ASSISTANT_MANAGER");
    }


    public OrganizitionDao(DaoConfig config) {
        super(config);
    }
    
    public OrganizitionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"t_Organizition\" (" + //
                "\"OrganizationId\" TEXT PRIMARY KEY NOT NULL ," + // 0: OrganizationId
                "\"PARENT_ID\" TEXT," + // 1: ParentId
                "\"CODE\" TEXT," + // 2: Code
                "\"SHORT_NAME\" TEXT," + // 3: ShortName
                "\"FULL_NAME\" TEXT," + // 4: FullName
                "\"DESCRIPTION\" TEXT," + // 5: Description
                "\"ENABLED\" INTEGER NOT NULL ," + // 6: Enabled
                "\"SORT_CODE\" INTEGER NOT NULL ," + // 7: SortCode
                "\"DELETE_MARK\" INTEGER NOT NULL ," + // 8: DeleteMark
                "\"MANAGER\" TEXT," + // 9: Manager
                "\"MANAGER_NAME\" TEXT," + // 10: ManagerName
                "\"ASSISTANT_MANAGER\" TEXT);"); // 11: AssistantManager
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"t_Organizition\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Organizition entity) {
        stmt.clearBindings();
 
        String OrganizationId = entity.getOrganizationId();
        if (OrganizationId != null) {
            stmt.bindString(1, OrganizationId);
        }
 
        String ParentId = entity.getParentId();
        if (ParentId != null) {
            stmt.bindString(2, ParentId);
        }
 
        String Code = entity.getCode();
        if (Code != null) {
            stmt.bindString(3, Code);
        }
 
        String ShortName = entity.getShortName();
        if (ShortName != null) {
            stmt.bindString(4, ShortName);
        }
 
        String FullName = entity.getFullName();
        if (FullName != null) {
            stmt.bindString(5, FullName);
        }
 
        String Description = entity.getDescription();
        if (Description != null) {
            stmt.bindString(6, Description);
        }
        stmt.bindLong(7, entity.getEnabled());
        stmt.bindLong(8, entity.getSortCode());
        stmt.bindLong(9, entity.getDeleteMark());
 
        String Manager = entity.getManager();
        if (Manager != null) {
            stmt.bindString(10, Manager);
        }
 
        String ManagerName = entity.getManagerName();
        if (ManagerName != null) {
            stmt.bindString(11, ManagerName);
        }
 
        String AssistantManager = entity.getAssistantManager();
        if (AssistantManager != null) {
            stmt.bindString(12, AssistantManager);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Organizition entity) {
        stmt.clearBindings();
 
        String OrganizationId = entity.getOrganizationId();
        if (OrganizationId != null) {
            stmt.bindString(1, OrganizationId);
        }
 
        String ParentId = entity.getParentId();
        if (ParentId != null) {
            stmt.bindString(2, ParentId);
        }
 
        String Code = entity.getCode();
        if (Code != null) {
            stmt.bindString(3, Code);
        }
 
        String ShortName = entity.getShortName();
        if (ShortName != null) {
            stmt.bindString(4, ShortName);
        }
 
        String FullName = entity.getFullName();
        if (FullName != null) {
            stmt.bindString(5, FullName);
        }
 
        String Description = entity.getDescription();
        if (Description != null) {
            stmt.bindString(6, Description);
        }
        stmt.bindLong(7, entity.getEnabled());
        stmt.bindLong(8, entity.getSortCode());
        stmt.bindLong(9, entity.getDeleteMark());
 
        String Manager = entity.getManager();
        if (Manager != null) {
            stmt.bindString(10, Manager);
        }
 
        String ManagerName = entity.getManagerName();
        if (ManagerName != null) {
            stmt.bindString(11, ManagerName);
        }
 
        String AssistantManager = entity.getAssistantManager();
        if (AssistantManager != null) {
            stmt.bindString(12, AssistantManager);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public Organizition readEntity(Cursor cursor, int offset) {
        Organizition entity = new Organizition( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // OrganizationId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // ParentId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Code
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // ShortName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // FullName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // Description
            cursor.getInt(offset + 6), // Enabled
            cursor.getInt(offset + 7), // SortCode
            cursor.getInt(offset + 8), // DeleteMark
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // Manager
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // ManagerName
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // AssistantManager
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Organizition entity, int offset) {
        entity.setOrganizationId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setParentId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setShortName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFullName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDescription(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setEnabled(cursor.getInt(offset + 6));
        entity.setSortCode(cursor.getInt(offset + 7));
        entity.setDeleteMark(cursor.getInt(offset + 8));
        entity.setManager(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setManagerName(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setAssistantManager(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Organizition entity, long rowId) {
        return entity.getOrganizationId();
    }
    
    @Override
    public String getKey(Organizition entity) {
        if(entity != null) {
            return entity.getOrganizationId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Organizition entity) {
        return entity.getOrganizationId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
