package com.uflycn.uoperation.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.uflycn.uoperation.bean.TowerChange;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "operation_TowerChanged".
*/
public class TowerChangeDao extends AbstractDao<TowerChange, Long> {

    public static final String TABLENAME = "operation_TowerChanged";

    /**
     * Properties of entity TowerChange.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property SysTowerChangedId = new Property(0, Long.class, "sysTowerChangedId", true, "_id");
        public final static Property SysUserId = new Property(1, String.class, "sysUserId", false, "SYS_USER_ID");
        public final static Property SysTowerId = new Property(2, int.class, "sysTowerId", false, "SYS_TOWER_ID");
        public final static Property Longitude = new Property(3, double.class, "Longitude", false, "LONGITUDE");
        public final static Property Latitude = new Property(4, double.class, "Latitude", false, "LATITUDE");
        public final static Property Altitude = new Property(5, double.class, "Altitude", false, "ALTITUDE");
        public final static Property CreateDate = new Property(6, String.class, "CreateDate", false, "CREATE_DATE");
        public final static Property UploadFlag = new Property(7, int.class, "UploadFlag", false, "UPLOAD_FLAG");
        public final static Property Status = new Property(8, int.class, "Status", false, "STATUS");
        public final static Property PlanDailyPlanSectionIDs = new Property(9, String.class, "PlanDailyPlanSectionIDs", false, "PLAN_DAILY_PLAN_SECTION_IDS");
        public final static Property SysPatrolExecutionID = new Property(10, String.class, "sysPatrolExecutionID", false, "SYS_PATROL_EXECUTION_ID");
    }


    public TowerChangeDao(DaoConfig config) {
        super(config);
    }
    
    public TowerChangeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"operation_TowerChanged\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: sysTowerChangedId
                "\"SYS_USER_ID\" TEXT," + // 1: sysUserId
                "\"SYS_TOWER_ID\" INTEGER NOT NULL ," + // 2: sysTowerId
                "\"LONGITUDE\" REAL NOT NULL ," + // 3: Longitude
                "\"LATITUDE\" REAL NOT NULL ," + // 4: Latitude
                "\"ALTITUDE\" REAL NOT NULL ," + // 5: Altitude
                "\"CREATE_DATE\" TEXT," + // 6: CreateDate
                "\"UPLOAD_FLAG\" INTEGER NOT NULL ," + // 7: UploadFlag
                "\"STATUS\" INTEGER NOT NULL ," + // 8: Status
                "\"PLAN_DAILY_PLAN_SECTION_IDS\" TEXT," + // 9: PlanDailyPlanSectionIDs
                "\"SYS_PATROL_EXECUTION_ID\" TEXT);"); // 10: sysPatrolExecutionID
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"operation_TowerChanged\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TowerChange entity) {
        stmt.clearBindings();
 
        Long sysTowerChangedId = entity.getSysTowerChangedId();
        if (sysTowerChangedId != null) {
            stmt.bindLong(1, sysTowerChangedId);
        }
 
        String sysUserId = entity.getSysUserId();
        if (sysUserId != null) {
            stmt.bindString(2, sysUserId);
        }
        stmt.bindLong(3, entity.getSysTowerId());
        stmt.bindDouble(4, entity.getLongitude());
        stmt.bindDouble(5, entity.getLatitude());
        stmt.bindDouble(6, entity.getAltitude());
 
        String CreateDate = entity.getCreateDate();
        if (CreateDate != null) {
            stmt.bindString(7, CreateDate);
        }
        stmt.bindLong(8, entity.getUploadFlag());
        stmt.bindLong(9, entity.getStatus());
 
        String PlanDailyPlanSectionIDs = entity.getPlanDailyPlanSectionIDs();
        if (PlanDailyPlanSectionIDs != null) {
            stmt.bindString(10, PlanDailyPlanSectionIDs);
        }
 
        String sysPatrolExecutionID = entity.getSysPatrolExecutionID();
        if (sysPatrolExecutionID != null) {
            stmt.bindString(11, sysPatrolExecutionID);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TowerChange entity) {
        stmt.clearBindings();
 
        Long sysTowerChangedId = entity.getSysTowerChangedId();
        if (sysTowerChangedId != null) {
            stmt.bindLong(1, sysTowerChangedId);
        }
 
        String sysUserId = entity.getSysUserId();
        if (sysUserId != null) {
            stmt.bindString(2, sysUserId);
        }
        stmt.bindLong(3, entity.getSysTowerId());
        stmt.bindDouble(4, entity.getLongitude());
        stmt.bindDouble(5, entity.getLatitude());
        stmt.bindDouble(6, entity.getAltitude());
 
        String CreateDate = entity.getCreateDate();
        if (CreateDate != null) {
            stmt.bindString(7, CreateDate);
        }
        stmt.bindLong(8, entity.getUploadFlag());
        stmt.bindLong(9, entity.getStatus());
 
        String PlanDailyPlanSectionIDs = entity.getPlanDailyPlanSectionIDs();
        if (PlanDailyPlanSectionIDs != null) {
            stmt.bindString(10, PlanDailyPlanSectionIDs);
        }
 
        String sysPatrolExecutionID = entity.getSysPatrolExecutionID();
        if (sysPatrolExecutionID != null) {
            stmt.bindString(11, sysPatrolExecutionID);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TowerChange readEntity(Cursor cursor, int offset) {
        TowerChange entity = new TowerChange( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // sysTowerChangedId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // sysUserId
            cursor.getInt(offset + 2), // sysTowerId
            cursor.getDouble(offset + 3), // Longitude
            cursor.getDouble(offset + 4), // Latitude
            cursor.getDouble(offset + 5), // Altitude
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // CreateDate
            cursor.getInt(offset + 7), // UploadFlag
            cursor.getInt(offset + 8), // Status
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // PlanDailyPlanSectionIDs
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // sysPatrolExecutionID
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TowerChange entity, int offset) {
        entity.setSysTowerChangedId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSysUserId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSysTowerId(cursor.getInt(offset + 2));
        entity.setLongitude(cursor.getDouble(offset + 3));
        entity.setLatitude(cursor.getDouble(offset + 4));
        entity.setAltitude(cursor.getDouble(offset + 5));
        entity.setCreateDate(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUploadFlag(cursor.getInt(offset + 7));
        entity.setStatus(cursor.getInt(offset + 8));
        entity.setPlanDailyPlanSectionIDs(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setSysPatrolExecutionID(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TowerChange entity, long rowId) {
        entity.setSysTowerChangedId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TowerChange entity) {
        if(entity != null) {
            return entity.getSysTowerChangedId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TowerChange entity) {
        return entity.getSysTowerChangedId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
