package com.uflycn.uoperation.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.uflycn.uoperation.bean.RoleMenuData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "t_rolemenudata".
*/
public class RoleMenuDataDao extends AbstractDao<RoleMenuData, String> {

    public static final String TABLENAME = "t_rolemenudata";

    /**
     * Properties of entity RoleMenuData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property RoleMenuDataId = new Property(0, String.class, "RoleMenuDataId", true, "ROLE_MENU_DATA_ID");
        public final static Property RoleId = new Property(1, String.class, "RoleId", false, "ROLE_ID");
        public final static Property MenuId = new Property(2, String.class, "MenuId", false, "MENU_ID");
        public final static Property AccessScope = new Property(3, Integer.class, "AccessScope", false, "ACCESS_SCOPE");
        public final static Property Organizations = new Property(4, String.class, "Organizations", false, "ORGANIZATIONS");
    }


    public RoleMenuDataDao(DaoConfig config) {
        super(config);
    }
    
    public RoleMenuDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"t_rolemenudata\" (" + //
                "\"ROLE_MENU_DATA_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: RoleMenuDataId
                "\"ROLE_ID\" TEXT," + // 1: RoleId
                "\"MENU_ID\" TEXT," + // 2: MenuId
                "\"ACCESS_SCOPE\" INTEGER," + // 3: AccessScope
                "\"ORGANIZATIONS\" TEXT);"); // 4: Organizations
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"t_rolemenudata\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RoleMenuData entity) {
        stmt.clearBindings();
 
        String RoleMenuDataId = entity.getRoleMenuDataId();
        if (RoleMenuDataId != null) {
            stmt.bindString(1, RoleMenuDataId);
        }
 
        String RoleId = entity.getRoleId();
        if (RoleId != null) {
            stmt.bindString(2, RoleId);
        }
 
        String MenuId = entity.getMenuId();
        if (MenuId != null) {
            stmt.bindString(3, MenuId);
        }
 
        Integer AccessScope = entity.getAccessScope();
        if (AccessScope != null) {
            stmt.bindLong(4, AccessScope);
        }
 
        String Organizations = entity.getOrganizations();
        if (Organizations != null) {
            stmt.bindString(5, Organizations);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RoleMenuData entity) {
        stmt.clearBindings();
 
        String RoleMenuDataId = entity.getRoleMenuDataId();
        if (RoleMenuDataId != null) {
            stmt.bindString(1, RoleMenuDataId);
        }
 
        String RoleId = entity.getRoleId();
        if (RoleId != null) {
            stmt.bindString(2, RoleId);
        }
 
        String MenuId = entity.getMenuId();
        if (MenuId != null) {
            stmt.bindString(3, MenuId);
        }
 
        Integer AccessScope = entity.getAccessScope();
        if (AccessScope != null) {
            stmt.bindLong(4, AccessScope);
        }
 
        String Organizations = entity.getOrganizations();
        if (Organizations != null) {
            stmt.bindString(5, Organizations);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public RoleMenuData readEntity(Cursor cursor, int offset) {
        RoleMenuData entity = new RoleMenuData( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // RoleMenuDataId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // RoleId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // MenuId
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // AccessScope
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // Organizations
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, RoleMenuData entity, int offset) {
        entity.setRoleMenuDataId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setRoleId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMenuId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAccessScope(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setOrganizations(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final String updateKeyAfterInsert(RoleMenuData entity, long rowId) {
        return entity.getRoleMenuDataId();
    }
    
    @Override
    public String getKey(RoleMenuData entity) {
        if(entity != null) {
            return entity.getRoleMenuDataId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(RoleMenuData entity) {
        return entity.getRoleMenuDataId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
