package com.uflycn.uoperation.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.uflycn.uoperation.bean.ZeroDetection;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "operation_ZeroDetection".
*/
public class ZeroDetectionDao extends AbstractDao<ZeroDetection, Long> {

    public static final String TABLENAME = "operation_ZeroDetection";

    /**
     * Properties of entity ZeroDetection.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "Id", true, "_id");
        public final static Property SysUserId = new Property(1, String.class, "sysUserId", false, "SYS_USER_ID");
        public final static Property SysTowerId = new Property(2, String.class, "sysTowerId", false, "SYS_TOWER_ID");
        public final static Property TowerType = new Property(3, String.class, "TowerType", false, "TOWER_TYPE");
        public final static Property JumperType = new Property(4, String.class, "JumperType", false, "JUMPER_TYPE");
        public final static Property InsulatorType = new Property(5, String.class, "InsulatorType", false, "INSULATOR_TYPE");
        public final static Property InsulatorStringLength = new Property(6, int.class, "InsulatorStringLength", false, "INSULATOR_STRING_LENGTH");
        public final static Property JumperStringLength = new Property(7, Integer.class, "JumperStringLength", false, "JUMPER_STRING_LENGTH");
        public final static Property PhaseALeft1 = new Property(8, String.class, "PhaseALeft1", false, "PHASE_ALEFT1");
        public final static Property PhaseALeft2 = new Property(9, String.class, "PhaseALeft2", false, "PHASE_ALEFT2");
        public final static Property PhaseARight1 = new Property(10, String.class, "PhaseARight1", false, "PHASE_ARIGHT1");
        public final static Property PhaseARight2 = new Property(11, String.class, "PhaseARight2", false, "PHASE_ARIGHT2");
        public final static Property PhaseBLeft1 = new Property(12, String.class, "PhaseBLeft1", false, "PHASE_BLEFT1");
        public final static Property PhaseBLeft2 = new Property(13, String.class, "PhaseBLeft2", false, "PHASE_BLEFT2");
        public final static Property PhaseBRight1 = new Property(14, String.class, "PhaseBRight1", false, "PHASE_BRIGHT1");
        public final static Property PhaseBRight2 = new Property(15, String.class, "PhaseBRight2", false, "PHASE_BRIGHT2");
        public final static Property PhaseCLeft1 = new Property(16, String.class, "PhaseCLeft1", false, "PHASE_CLEFT1");
        public final static Property PhaseCLeft2 = new Property(17, String.class, "PhaseCLeft2", false, "PHASE_CLEFT2");
        public final static Property PhaseCRight1 = new Property(18, String.class, "PhaseCRight1", false, "PHASE_CRIGHT1");
        public final static Property PhaseCRight2 = new Property(19, String.class, "PhaseCRight2", false, "PHASE_CRIGHT2");
        public final static Property JumperA1 = new Property(20, String.class, "JumperA1", false, "JUMPER_A1");
        public final static Property JumperA2 = new Property(21, String.class, "JumperA2", false, "JUMPER_A2");
        public final static Property JumperB1 = new Property(22, String.class, "JumperB1", false, "JUMPER_B1");
        public final static Property JumperB2 = new Property(23, String.class, "JumperB2", false, "JUMPER_B2");
        public final static Property JumperC1 = new Property(24, String.class, "JumperC1", false, "JUMPER_C1");
        public final static Property JumperC2 = new Property(25, String.class, "JumperC2", false, "JUMPER_C2");
        public final static Property CreateDate = new Property(26, String.class, "CreateDate", false, "CREATE_DATE");
        public final static Property UploadFlag = new Property(27, int.class, "UploadFlag", false, "UPLOAD_FLAG");
        public final static Property PlanDailyPlanSectionIDs = new Property(28, String.class, "PlanDailyPlanSectionIDs", false, "PLAN_DAILY_PLAN_SECTION_IDS");
        public final static Property SysPatrolExecutionID = new Property(29, String.class, "sysPatrolExecutionID", false, "SYS_PATROL_EXECUTION_ID");
    }


    public ZeroDetectionDao(DaoConfig config) {
        super(config);
    }
    
    public ZeroDetectionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"operation_ZeroDetection\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: Id
                "\"SYS_USER_ID\" TEXT," + // 1: sysUserId
                "\"SYS_TOWER_ID\" TEXT," + // 2: sysTowerId
                "\"TOWER_TYPE\" TEXT," + // 3: TowerType
                "\"JUMPER_TYPE\" TEXT," + // 4: JumperType
                "\"INSULATOR_TYPE\" TEXT," + // 5: InsulatorType
                "\"INSULATOR_STRING_LENGTH\" INTEGER NOT NULL ," + // 6: InsulatorStringLength
                "\"JUMPER_STRING_LENGTH\" INTEGER," + // 7: JumperStringLength
                "\"PHASE_ALEFT1\" TEXT," + // 8: PhaseALeft1
                "\"PHASE_ALEFT2\" TEXT," + // 9: PhaseALeft2
                "\"PHASE_ARIGHT1\" TEXT," + // 10: PhaseARight1
                "\"PHASE_ARIGHT2\" TEXT," + // 11: PhaseARight2
                "\"PHASE_BLEFT1\" TEXT," + // 12: PhaseBLeft1
                "\"PHASE_BLEFT2\" TEXT," + // 13: PhaseBLeft2
                "\"PHASE_BRIGHT1\" TEXT," + // 14: PhaseBRight1
                "\"PHASE_BRIGHT2\" TEXT," + // 15: PhaseBRight2
                "\"PHASE_CLEFT1\" TEXT," + // 16: PhaseCLeft1
                "\"PHASE_CLEFT2\" TEXT," + // 17: PhaseCLeft2
                "\"PHASE_CRIGHT1\" TEXT," + // 18: PhaseCRight1
                "\"PHASE_CRIGHT2\" TEXT," + // 19: PhaseCRight2
                "\"JUMPER_A1\" TEXT," + // 20: JumperA1
                "\"JUMPER_A2\" TEXT," + // 21: JumperA2
                "\"JUMPER_B1\" TEXT," + // 22: JumperB1
                "\"JUMPER_B2\" TEXT," + // 23: JumperB2
                "\"JUMPER_C1\" TEXT," + // 24: JumperC1
                "\"JUMPER_C2\" TEXT," + // 25: JumperC2
                "\"CREATE_DATE\" TEXT," + // 26: CreateDate
                "\"UPLOAD_FLAG\" INTEGER NOT NULL ," + // 27: UploadFlag
                "\"PLAN_DAILY_PLAN_SECTION_IDS\" TEXT," + // 28: PlanDailyPlanSectionIDs
                "\"SYS_PATROL_EXECUTION_ID\" TEXT);"); // 29: sysPatrolExecutionID
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"operation_ZeroDetection\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ZeroDetection entity) {
        stmt.clearBindings();
 
        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(1, Id);
        }
 
        String sysUserId = entity.getSysUserId();
        if (sysUserId != null) {
            stmt.bindString(2, sysUserId);
        }
 
        String sysTowerId = entity.getSysTowerId();
        if (sysTowerId != null) {
            stmt.bindString(3, sysTowerId);
        }
 
        String TowerType = entity.getTowerType();
        if (TowerType != null) {
            stmt.bindString(4, TowerType);
        }
 
        String JumperType = entity.getJumperType();
        if (JumperType != null) {
            stmt.bindString(5, JumperType);
        }
 
        String InsulatorType = entity.getInsulatorType();
        if (InsulatorType != null) {
            stmt.bindString(6, InsulatorType);
        }
        stmt.bindLong(7, entity.getInsulatorStringLength());
 
        Integer JumperStringLength = entity.getJumperStringLength();
        if (JumperStringLength != null) {
            stmt.bindLong(8, JumperStringLength);
        }
 
        String PhaseALeft1 = entity.getPhaseALeft1();
        if (PhaseALeft1 != null) {
            stmt.bindString(9, PhaseALeft1);
        }
 
        String PhaseALeft2 = entity.getPhaseALeft2();
        if (PhaseALeft2 != null) {
            stmt.bindString(10, PhaseALeft2);
        }
 
        String PhaseARight1 = entity.getPhaseARight1();
        if (PhaseARight1 != null) {
            stmt.bindString(11, PhaseARight1);
        }
 
        String PhaseARight2 = entity.getPhaseARight2();
        if (PhaseARight2 != null) {
            stmt.bindString(12, PhaseARight2);
        }
 
        String PhaseBLeft1 = entity.getPhaseBLeft1();
        if (PhaseBLeft1 != null) {
            stmt.bindString(13, PhaseBLeft1);
        }
 
        String PhaseBLeft2 = entity.getPhaseBLeft2();
        if (PhaseBLeft2 != null) {
            stmt.bindString(14, PhaseBLeft2);
        }
 
        String PhaseBRight1 = entity.getPhaseBRight1();
        if (PhaseBRight1 != null) {
            stmt.bindString(15, PhaseBRight1);
        }
 
        String PhaseBRight2 = entity.getPhaseBRight2();
        if (PhaseBRight2 != null) {
            stmt.bindString(16, PhaseBRight2);
        }
 
        String PhaseCLeft1 = entity.getPhaseCLeft1();
        if (PhaseCLeft1 != null) {
            stmt.bindString(17, PhaseCLeft1);
        }
 
        String PhaseCLeft2 = entity.getPhaseCLeft2();
        if (PhaseCLeft2 != null) {
            stmt.bindString(18, PhaseCLeft2);
        }
 
        String PhaseCRight1 = entity.getPhaseCRight1();
        if (PhaseCRight1 != null) {
            stmt.bindString(19, PhaseCRight1);
        }
 
        String PhaseCRight2 = entity.getPhaseCRight2();
        if (PhaseCRight2 != null) {
            stmt.bindString(20, PhaseCRight2);
        }
 
        String JumperA1 = entity.getJumperA1();
        if (JumperA1 != null) {
            stmt.bindString(21, JumperA1);
        }
 
        String JumperA2 = entity.getJumperA2();
        if (JumperA2 != null) {
            stmt.bindString(22, JumperA2);
        }
 
        String JumperB1 = entity.getJumperB1();
        if (JumperB1 != null) {
            stmt.bindString(23, JumperB1);
        }
 
        String JumperB2 = entity.getJumperB2();
        if (JumperB2 != null) {
            stmt.bindString(24, JumperB2);
        }
 
        String JumperC1 = entity.getJumperC1();
        if (JumperC1 != null) {
            stmt.bindString(25, JumperC1);
        }
 
        String JumperC2 = entity.getJumperC2();
        if (JumperC2 != null) {
            stmt.bindString(26, JumperC2);
        }
 
        String CreateDate = entity.getCreateDate();
        if (CreateDate != null) {
            stmt.bindString(27, CreateDate);
        }
        stmt.bindLong(28, entity.getUploadFlag());
 
        String PlanDailyPlanSectionIDs = entity.getPlanDailyPlanSectionIDs();
        if (PlanDailyPlanSectionIDs != null) {
            stmt.bindString(29, PlanDailyPlanSectionIDs);
        }
 
        String sysPatrolExecutionID = entity.getSysPatrolExecutionID();
        if (sysPatrolExecutionID != null) {
            stmt.bindString(30, sysPatrolExecutionID);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ZeroDetection entity) {
        stmt.clearBindings();
 
        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(1, Id);
        }
 
        String sysUserId = entity.getSysUserId();
        if (sysUserId != null) {
            stmt.bindString(2, sysUserId);
        }
 
        String sysTowerId = entity.getSysTowerId();
        if (sysTowerId != null) {
            stmt.bindString(3, sysTowerId);
        }
 
        String TowerType = entity.getTowerType();
        if (TowerType != null) {
            stmt.bindString(4, TowerType);
        }
 
        String JumperType = entity.getJumperType();
        if (JumperType != null) {
            stmt.bindString(5, JumperType);
        }
 
        String InsulatorType = entity.getInsulatorType();
        if (InsulatorType != null) {
            stmt.bindString(6, InsulatorType);
        }
        stmt.bindLong(7, entity.getInsulatorStringLength());
 
        Integer JumperStringLength = entity.getJumperStringLength();
        if (JumperStringLength != null) {
            stmt.bindLong(8, JumperStringLength);
        }
 
        String PhaseALeft1 = entity.getPhaseALeft1();
        if (PhaseALeft1 != null) {
            stmt.bindString(9, PhaseALeft1);
        }
 
        String PhaseALeft2 = entity.getPhaseALeft2();
        if (PhaseALeft2 != null) {
            stmt.bindString(10, PhaseALeft2);
        }
 
        String PhaseARight1 = entity.getPhaseARight1();
        if (PhaseARight1 != null) {
            stmt.bindString(11, PhaseARight1);
        }
 
        String PhaseARight2 = entity.getPhaseARight2();
        if (PhaseARight2 != null) {
            stmt.bindString(12, PhaseARight2);
        }
 
        String PhaseBLeft1 = entity.getPhaseBLeft1();
        if (PhaseBLeft1 != null) {
            stmt.bindString(13, PhaseBLeft1);
        }
 
        String PhaseBLeft2 = entity.getPhaseBLeft2();
        if (PhaseBLeft2 != null) {
            stmt.bindString(14, PhaseBLeft2);
        }
 
        String PhaseBRight1 = entity.getPhaseBRight1();
        if (PhaseBRight1 != null) {
            stmt.bindString(15, PhaseBRight1);
        }
 
        String PhaseBRight2 = entity.getPhaseBRight2();
        if (PhaseBRight2 != null) {
            stmt.bindString(16, PhaseBRight2);
        }
 
        String PhaseCLeft1 = entity.getPhaseCLeft1();
        if (PhaseCLeft1 != null) {
            stmt.bindString(17, PhaseCLeft1);
        }
 
        String PhaseCLeft2 = entity.getPhaseCLeft2();
        if (PhaseCLeft2 != null) {
            stmt.bindString(18, PhaseCLeft2);
        }
 
        String PhaseCRight1 = entity.getPhaseCRight1();
        if (PhaseCRight1 != null) {
            stmt.bindString(19, PhaseCRight1);
        }
 
        String PhaseCRight2 = entity.getPhaseCRight2();
        if (PhaseCRight2 != null) {
            stmt.bindString(20, PhaseCRight2);
        }
 
        String JumperA1 = entity.getJumperA1();
        if (JumperA1 != null) {
            stmt.bindString(21, JumperA1);
        }
 
        String JumperA2 = entity.getJumperA2();
        if (JumperA2 != null) {
            stmt.bindString(22, JumperA2);
        }
 
        String JumperB1 = entity.getJumperB1();
        if (JumperB1 != null) {
            stmt.bindString(23, JumperB1);
        }
 
        String JumperB2 = entity.getJumperB2();
        if (JumperB2 != null) {
            stmt.bindString(24, JumperB2);
        }
 
        String JumperC1 = entity.getJumperC1();
        if (JumperC1 != null) {
            stmt.bindString(25, JumperC1);
        }
 
        String JumperC2 = entity.getJumperC2();
        if (JumperC2 != null) {
            stmt.bindString(26, JumperC2);
        }
 
        String CreateDate = entity.getCreateDate();
        if (CreateDate != null) {
            stmt.bindString(27, CreateDate);
        }
        stmt.bindLong(28, entity.getUploadFlag());
 
        String PlanDailyPlanSectionIDs = entity.getPlanDailyPlanSectionIDs();
        if (PlanDailyPlanSectionIDs != null) {
            stmt.bindString(29, PlanDailyPlanSectionIDs);
        }
 
        String sysPatrolExecutionID = entity.getSysPatrolExecutionID();
        if (sysPatrolExecutionID != null) {
            stmt.bindString(30, sysPatrolExecutionID);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ZeroDetection readEntity(Cursor cursor, int offset) {
        ZeroDetection entity = new ZeroDetection( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // Id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // sysUserId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // sysTowerId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // TowerType
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // JumperType
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // InsulatorType
            cursor.getInt(offset + 6), // InsulatorStringLength
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // JumperStringLength
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // PhaseALeft1
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // PhaseALeft2
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // PhaseARight1
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // PhaseARight2
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // PhaseBLeft1
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // PhaseBLeft2
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // PhaseBRight1
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // PhaseBRight2
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // PhaseCLeft1
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // PhaseCLeft2
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // PhaseCRight1
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // PhaseCRight2
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // JumperA1
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // JumperA2
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // JumperB1
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // JumperB2
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // JumperC1
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // JumperC2
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // CreateDate
            cursor.getInt(offset + 27), // UploadFlag
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // PlanDailyPlanSectionIDs
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29) // sysPatrolExecutionID
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ZeroDetection entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSysUserId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSysTowerId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTowerType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setJumperType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setInsulatorType(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setInsulatorStringLength(cursor.getInt(offset + 6));
        entity.setJumperStringLength(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setPhaseALeft1(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPhaseALeft2(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPhaseARight1(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setPhaseARight2(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setPhaseBLeft1(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setPhaseBLeft2(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setPhaseBRight1(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setPhaseBRight2(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setPhaseCLeft1(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setPhaseCLeft2(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setPhaseCRight1(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setPhaseCRight2(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setJumperA1(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setJumperA2(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setJumperB1(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setJumperB2(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setJumperC1(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setJumperC2(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setCreateDate(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setUploadFlag(cursor.getInt(offset + 27));
        entity.setPlanDailyPlanSectionIDs(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setSysPatrolExecutionID(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ZeroDetection entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ZeroDetection entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ZeroDetection entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
