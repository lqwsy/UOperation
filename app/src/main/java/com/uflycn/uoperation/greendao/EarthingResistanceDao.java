package com.uflycn.uoperation.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.uflycn.uoperation.bean.EarthingResistance;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "operation_EarthingResistance".
*/
public class EarthingResistanceDao extends AbstractDao<EarthingResistance, Long> {

    public static final String TABLENAME = "operation_EarthingResistance";

    /**
     * Properties of entity EarthingResistance.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "Id", true, "_id");
        public final static Property SysUserId = new Property(1, String.class, "sysUserId", false, "SYS_USER_ID");
        public final static Property TowerId = new Property(2, int.class, "TowerId", false, "TOWER_ID");
        public final static Property ResistanceA = new Property(3, Double.class, "ResistanceA", false, "RESISTANCE_A");
        public final static Property ResistanceB = new Property(4, Double.class, "ResistanceB", false, "RESISTANCE_B");
        public final static Property ResistanceC = new Property(5, Double.class, "ResistanceC", false, "RESISTANCE_C");
        public final static Property ResistanceD = new Property(6, Double.class, "ResistanceD", false, "RESISTANCE_D");
        public final static Property CreateDate = new Property(7, String.class, "CreateDate", false, "CREATE_DATE");
        public final static Property UploadFlag = new Property(8, int.class, "UploadFlag", false, "UPLOAD_FLAG");
        public final static Property PlanDailyPlanSectionIDs = new Property(9, String.class, "PlanDailyPlanSectionIDs", false, "PLAN_DAILY_PLAN_SECTION_IDS");
        public final static Property SysPatrolExecutionID = new Property(10, String.class, "sysPatrolExecutionID", false, "SYS_PATROL_EXECUTION_ID");
    }


    public EarthingResistanceDao(DaoConfig config) {
        super(config);
    }
    
    public EarthingResistanceDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"operation_EarthingResistance\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: Id
                "\"SYS_USER_ID\" TEXT," + // 1: sysUserId
                "\"TOWER_ID\" INTEGER NOT NULL ," + // 2: TowerId
                "\"RESISTANCE_A\" REAL," + // 3: ResistanceA
                "\"RESISTANCE_B\" REAL," + // 4: ResistanceB
                "\"RESISTANCE_C\" REAL," + // 5: ResistanceC
                "\"RESISTANCE_D\" REAL," + // 6: ResistanceD
                "\"CREATE_DATE\" TEXT," + // 7: CreateDate
                "\"UPLOAD_FLAG\" INTEGER NOT NULL ," + // 8: UploadFlag
                "\"PLAN_DAILY_PLAN_SECTION_IDS\" TEXT," + // 9: PlanDailyPlanSectionIDs
                "\"SYS_PATROL_EXECUTION_ID\" TEXT);"); // 10: sysPatrolExecutionID
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"operation_EarthingResistance\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, EarthingResistance entity) {
        stmt.clearBindings();
 
        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(1, Id);
        }
 
        String sysUserId = entity.getSysUserId();
        if (sysUserId != null) {
            stmt.bindString(2, sysUserId);
        }
        stmt.bindLong(3, entity.getTowerId());
 
        Double ResistanceA = entity.getResistanceA();
        if (ResistanceA != null) {
            stmt.bindDouble(4, ResistanceA);
        }
 
        Double ResistanceB = entity.getResistanceB();
        if (ResistanceB != null) {
            stmt.bindDouble(5, ResistanceB);
        }
 
        Double ResistanceC = entity.getResistanceC();
        if (ResistanceC != null) {
            stmt.bindDouble(6, ResistanceC);
        }
 
        Double ResistanceD = entity.getResistanceD();
        if (ResistanceD != null) {
            stmt.bindDouble(7, ResistanceD);
        }
 
        String CreateDate = entity.getCreateDate();
        if (CreateDate != null) {
            stmt.bindString(8, CreateDate);
        }
        stmt.bindLong(9, entity.getUploadFlag());
 
        String PlanDailyPlanSectionIDs = entity.getPlanDailyPlanSectionIDs();
        if (PlanDailyPlanSectionIDs != null) {
            stmt.bindString(10, PlanDailyPlanSectionIDs);
        }
 
        String sysPatrolExecutionID = entity.getSysPatrolExecutionID();
        if (sysPatrolExecutionID != null) {
            stmt.bindString(11, sysPatrolExecutionID);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, EarthingResistance entity) {
        stmt.clearBindings();
 
        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(1, Id);
        }
 
        String sysUserId = entity.getSysUserId();
        if (sysUserId != null) {
            stmt.bindString(2, sysUserId);
        }
        stmt.bindLong(3, entity.getTowerId());
 
        Double ResistanceA = entity.getResistanceA();
        if (ResistanceA != null) {
            stmt.bindDouble(4, ResistanceA);
        }
 
        Double ResistanceB = entity.getResistanceB();
        if (ResistanceB != null) {
            stmt.bindDouble(5, ResistanceB);
        }
 
        Double ResistanceC = entity.getResistanceC();
        if (ResistanceC != null) {
            stmt.bindDouble(6, ResistanceC);
        }
 
        Double ResistanceD = entity.getResistanceD();
        if (ResistanceD != null) {
            stmt.bindDouble(7, ResistanceD);
        }
 
        String CreateDate = entity.getCreateDate();
        if (CreateDate != null) {
            stmt.bindString(8, CreateDate);
        }
        stmt.bindLong(9, entity.getUploadFlag());
 
        String PlanDailyPlanSectionIDs = entity.getPlanDailyPlanSectionIDs();
        if (PlanDailyPlanSectionIDs != null) {
            stmt.bindString(10, PlanDailyPlanSectionIDs);
        }
 
        String sysPatrolExecutionID = entity.getSysPatrolExecutionID();
        if (sysPatrolExecutionID != null) {
            stmt.bindString(11, sysPatrolExecutionID);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public EarthingResistance readEntity(Cursor cursor, int offset) {
        EarthingResistance entity = new EarthingResistance( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // Id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // sysUserId
            cursor.getInt(offset + 2), // TowerId
            cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3), // ResistanceA
            cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4), // ResistanceB
            cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5), // ResistanceC
            cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6), // ResistanceD
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // CreateDate
            cursor.getInt(offset + 8), // UploadFlag
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // PlanDailyPlanSectionIDs
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // sysPatrolExecutionID
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, EarthingResistance entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSysUserId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTowerId(cursor.getInt(offset + 2));
        entity.setResistanceA(cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3));
        entity.setResistanceB(cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4));
        entity.setResistanceC(cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5));
        entity.setResistanceD(cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6));
        entity.setCreateDate(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setUploadFlag(cursor.getInt(offset + 8));
        entity.setPlanDailyPlanSectionIDs(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setSysPatrolExecutionID(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(EarthingResistance entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(EarthingResistance entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(EarthingResistance entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
