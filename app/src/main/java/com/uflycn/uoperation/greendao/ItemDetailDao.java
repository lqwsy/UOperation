package com.uflycn.uoperation.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.uflycn.uoperation.bean.ItemDetail;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "t_ItemDetails".
*/
public class ItemDetailDao extends AbstractDao<ItemDetail, String> {

    public static final String TABLENAME = "t_ItemDetails";

    /**
     * Properties of entity ItemDetail.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ItemDetailsId = new Property(0, String.class, "ItemDetailsId", true, "ITEM_DETAILS_ID");
        public final static Property ItemsName = new Property(1, String.class, "ItemsName", false, "ITEMS_NAME");
        public final static Property ParentId = new Property(2, String.class, "ParentId", false, "PARENT_ID");
        public final static Property ItemName = new Property(3, String.class, "ItemName", false, "ITEM_NAME");
        public final static Property ItemCode = new Property(4, String.class, "ItemCode", false, "ITEM_CODE");
        public final static Property Description = new Property(5, String.class, "Description", false, "DESCRIPTION");
        public final static Property SortCode = new Property(6, int.class, "SortCode", false, "SORT_CODE");
        public final static Property DeleteMark = new Property(7, int.class, "DeleteMark", false, "DELETE_MARK");
        public final static Property ItemValue = new Property(8, String.class, "ItemValue", false, "ITEM_VALUE");
    }


    public ItemDetailDao(DaoConfig config) {
        super(config);
    }
    
    public ItemDetailDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"t_ItemDetails\" (" + //
                "\"ITEM_DETAILS_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: ItemDetailsId
                "\"ITEMS_NAME\" TEXT," + // 1: ItemsName
                "\"PARENT_ID\" TEXT," + // 2: ParentId
                "\"ITEM_NAME\" TEXT," + // 3: ItemName
                "\"ITEM_CODE\" TEXT," + // 4: ItemCode
                "\"DESCRIPTION\" TEXT," + // 5: Description
                "\"SORT_CODE\" INTEGER NOT NULL ," + // 6: SortCode
                "\"DELETE_MARK\" INTEGER NOT NULL ," + // 7: DeleteMark
                "\"ITEM_VALUE\" TEXT);"); // 8: ItemValue
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"t_ItemDetails\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ItemDetail entity) {
        stmt.clearBindings();
 
        String ItemDetailsId = entity.getItemDetailsId();
        if (ItemDetailsId != null) {
            stmt.bindString(1, ItemDetailsId);
        }
 
        String ItemsName = entity.getItemsName();
        if (ItemsName != null) {
            stmt.bindString(2, ItemsName);
        }
 
        String ParentId = entity.getParentId();
        if (ParentId != null) {
            stmt.bindString(3, ParentId);
        }
 
        String ItemName = entity.getItemName();
        if (ItemName != null) {
            stmt.bindString(4, ItemName);
        }
 
        String ItemCode = entity.getItemCode();
        if (ItemCode != null) {
            stmt.bindString(5, ItemCode);
        }
 
        String Description = entity.getDescription();
        if (Description != null) {
            stmt.bindString(6, Description);
        }
        stmt.bindLong(7, entity.getSortCode());
        stmt.bindLong(8, entity.getDeleteMark());
 
        String ItemValue = entity.getItemValue();
        if (ItemValue != null) {
            stmt.bindString(9, ItemValue);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ItemDetail entity) {
        stmt.clearBindings();
 
        String ItemDetailsId = entity.getItemDetailsId();
        if (ItemDetailsId != null) {
            stmt.bindString(1, ItemDetailsId);
        }
 
        String ItemsName = entity.getItemsName();
        if (ItemsName != null) {
            stmt.bindString(2, ItemsName);
        }
 
        String ParentId = entity.getParentId();
        if (ParentId != null) {
            stmt.bindString(3, ParentId);
        }
 
        String ItemName = entity.getItemName();
        if (ItemName != null) {
            stmt.bindString(4, ItemName);
        }
 
        String ItemCode = entity.getItemCode();
        if (ItemCode != null) {
            stmt.bindString(5, ItemCode);
        }
 
        String Description = entity.getDescription();
        if (Description != null) {
            stmt.bindString(6, Description);
        }
        stmt.bindLong(7, entity.getSortCode());
        stmt.bindLong(8, entity.getDeleteMark());
 
        String ItemValue = entity.getItemValue();
        if (ItemValue != null) {
            stmt.bindString(9, ItemValue);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public ItemDetail readEntity(Cursor cursor, int offset) {
        ItemDetail entity = new ItemDetail( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // ItemDetailsId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // ItemsName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // ParentId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // ItemName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // ItemCode
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // Description
            cursor.getInt(offset + 6), // SortCode
            cursor.getInt(offset + 7), // DeleteMark
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // ItemValue
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ItemDetail entity, int offset) {
        entity.setItemDetailsId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setItemsName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setParentId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setItemName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setItemCode(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDescription(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSortCode(cursor.getInt(offset + 6));
        entity.setDeleteMark(cursor.getInt(offset + 7));
        entity.setItemValue(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final String updateKeyAfterInsert(ItemDetail entity, long rowId) {
        return entity.getItemDetailsId();
    }
    
    @Override
    public String getKey(ItemDetail entity) {
        if(entity != null) {
            return entity.getItemDetailsId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ItemDetail entity) {
        return entity.getItemDetailsId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
