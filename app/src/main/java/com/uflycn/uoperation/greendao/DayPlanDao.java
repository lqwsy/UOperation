package com.uflycn.uoperation.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.uflycn.uoperation.bean.DayPlan;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "t_dayPlan".
*/
public class DayPlanDao extends AbstractDao<DayPlan, Long> {

    public static final String TABLENAME = "t_dayPlan";

    /**
     * Properties of entity DayPlan.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "Id", true, "_id");
        public final static Property SysDailyPlanSectionID = new Property(1, String.class, "sysDailyPlanSectionID", false, "SYS_DAILY_PLAN_SECTION_ID");
        public final static Property StartDateString = new Property(2, String.class, "StartDateString", false, "START_DATE_STRING");
        public final static Property StatusString = new Property(3, String.class, "StatusString", false, "STATUS_STRING");
        public final static Property TypeOfWorkString = new Property(4, String.class, "TypeOfWorkString", false, "TYPE_OF_WORK_STRING");
        public final static Property ResponsiblePersonName = new Property(5, String.class, "ResponsiblePersonName", false, "RESPONSIBLE_PERSON_NAME");
        public final static Property ResponsiblePersonID = new Property(6, String.class, "ResponsiblePersonID", false, "RESPONSIBLE_PERSON_ID");
        public final static Property OfficeHolderNames = new Property(7, String.class, "OfficeHolderNames", false, "OFFICE_HOLDER_NAMES");
        public final static Property JobContent = new Property(8, String.class, "JobContent", false, "JOB_CONTENT");
        public final static Property Remark = new Property(9, String.class, "Remark", false, "REMARK");
    }


    public DayPlanDao(DaoConfig config) {
        super(config);
    }
    
    public DayPlanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"t_dayPlan\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: Id
                "\"SYS_DAILY_PLAN_SECTION_ID\" TEXT," + // 1: sysDailyPlanSectionID
                "\"START_DATE_STRING\" TEXT," + // 2: StartDateString
                "\"STATUS_STRING\" TEXT," + // 3: StatusString
                "\"TYPE_OF_WORK_STRING\" TEXT," + // 4: TypeOfWorkString
                "\"RESPONSIBLE_PERSON_NAME\" TEXT," + // 5: ResponsiblePersonName
                "\"RESPONSIBLE_PERSON_ID\" TEXT," + // 6: ResponsiblePersonID
                "\"OFFICE_HOLDER_NAMES\" TEXT," + // 7: OfficeHolderNames
                "\"JOB_CONTENT\" TEXT," + // 8: JobContent
                "\"REMARK\" TEXT);"); // 9: Remark
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"t_dayPlan\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DayPlan entity) {
        stmt.clearBindings();
 
        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(1, Id);
        }
 
        String sysDailyPlanSectionID = entity.getSysDailyPlanSectionID();
        if (sysDailyPlanSectionID != null) {
            stmt.bindString(2, sysDailyPlanSectionID);
        }
 
        String StartDateString = entity.getStartDateString();
        if (StartDateString != null) {
            stmt.bindString(3, StartDateString);
        }
 
        String StatusString = entity.getStatusString();
        if (StatusString != null) {
            stmt.bindString(4, StatusString);
        }
 
        String TypeOfWorkString = entity.getTypeOfWorkString();
        if (TypeOfWorkString != null) {
            stmt.bindString(5, TypeOfWorkString);
        }
 
        String ResponsiblePersonName = entity.getResponsiblePersonName();
        if (ResponsiblePersonName != null) {
            stmt.bindString(6, ResponsiblePersonName);
        }
 
        String ResponsiblePersonID = entity.getResponsiblePersonID();
        if (ResponsiblePersonID != null) {
            stmt.bindString(7, ResponsiblePersonID);
        }
 
        String OfficeHolderNames = entity.getOfficeHolderNames();
        if (OfficeHolderNames != null) {
            stmt.bindString(8, OfficeHolderNames);
        }
 
        String JobContent = entity.getJobContent();
        if (JobContent != null) {
            stmt.bindString(9, JobContent);
        }
 
        String Remark = entity.getRemark();
        if (Remark != null) {
            stmt.bindString(10, Remark);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DayPlan entity) {
        stmt.clearBindings();
 
        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(1, Id);
        }
 
        String sysDailyPlanSectionID = entity.getSysDailyPlanSectionID();
        if (sysDailyPlanSectionID != null) {
            stmt.bindString(2, sysDailyPlanSectionID);
        }
 
        String StartDateString = entity.getStartDateString();
        if (StartDateString != null) {
            stmt.bindString(3, StartDateString);
        }
 
        String StatusString = entity.getStatusString();
        if (StatusString != null) {
            stmt.bindString(4, StatusString);
        }
 
        String TypeOfWorkString = entity.getTypeOfWorkString();
        if (TypeOfWorkString != null) {
            stmt.bindString(5, TypeOfWorkString);
        }
 
        String ResponsiblePersonName = entity.getResponsiblePersonName();
        if (ResponsiblePersonName != null) {
            stmt.bindString(6, ResponsiblePersonName);
        }
 
        String ResponsiblePersonID = entity.getResponsiblePersonID();
        if (ResponsiblePersonID != null) {
            stmt.bindString(7, ResponsiblePersonID);
        }
 
        String OfficeHolderNames = entity.getOfficeHolderNames();
        if (OfficeHolderNames != null) {
            stmt.bindString(8, OfficeHolderNames);
        }
 
        String JobContent = entity.getJobContent();
        if (JobContent != null) {
            stmt.bindString(9, JobContent);
        }
 
        String Remark = entity.getRemark();
        if (Remark != null) {
            stmt.bindString(10, Remark);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DayPlan readEntity(Cursor cursor, int offset) {
        DayPlan entity = new DayPlan( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // Id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // sysDailyPlanSectionID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // StartDateString
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // StatusString
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // TypeOfWorkString
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // ResponsiblePersonName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // ResponsiblePersonID
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // OfficeHolderNames
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // JobContent
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // Remark
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DayPlan entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSysDailyPlanSectionID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setStartDateString(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setStatusString(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTypeOfWorkString(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setResponsiblePersonName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setResponsiblePersonID(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setOfficeHolderNames(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setJobContent(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setRemark(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DayPlan entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DayPlan entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DayPlan entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
