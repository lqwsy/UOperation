package com.uflycn.uoperation.greendao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.uflycn.uoperation.bean.OptTensilePointTemperature;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "operation_OptTensilePointTemperature".
*/
public class OptTensilePointTemperatureDao extends AbstractDao<OptTensilePointTemperature, Long> {

    public static final String TABLENAME = "operation_OptTensilePointTemperature";

    /**
     * Properties of entity OptTensilePointTemperature.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property InfraredTemperatureId = new Property(1, Long.class, "InfraredTemperatureId", false, "INFRARED_TEMPERATURE_ID");
        public final static Property Phase = new Property(2, String.class, "Phase", false, "PHASE");
        public final static Property SideBar = new Property(3, String.class, "SideBar", false, "SIDE_BAR");
        public final static Property BiasPoint = new Property(4, Integer.class, "BiasPoint", false, "BIAS_POINT");
        public final static Property Temperature = new Property(5, Double.class, "Temperature", false, "TEMPERATURE");
        public final static Property Longitude = new Property(6, String.class, "Longitude", false, "LONGITUDE");
        public final static Property Latitude = new Property(7, String.class, "Latitude", false, "LATITUDE");
    }

    private Query<OptTensilePointTemperature> infraredTemperature_OptTensilePointTemperatureListQuery;

    public OptTensilePointTemperatureDao(DaoConfig config) {
        super(config);
    }
    
    public OptTensilePointTemperatureDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"operation_OptTensilePointTemperature\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"INFRARED_TEMPERATURE_ID\" INTEGER," + // 1: InfraredTemperatureId
                "\"PHASE\" TEXT," + // 2: Phase
                "\"SIDE_BAR\" TEXT," + // 3: SideBar
                "\"BIAS_POINT\" INTEGER," + // 4: BiasPoint
                "\"TEMPERATURE\" REAL," + // 5: Temperature
                "\"LONGITUDE\" TEXT," + // 6: Longitude
                "\"LATITUDE\" TEXT);"); // 7: Latitude
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"operation_OptTensilePointTemperature\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, OptTensilePointTemperature entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long InfraredTemperatureId = entity.getInfraredTemperatureId();
        if (InfraredTemperatureId != null) {
            stmt.bindLong(2, InfraredTemperatureId);
        }
 
        String Phase = entity.getPhase();
        if (Phase != null) {
            stmt.bindString(3, Phase);
        }
 
        String SideBar = entity.getSideBar();
        if (SideBar != null) {
            stmt.bindString(4, SideBar);
        }
 
        Integer BiasPoint = entity.getBiasPoint();
        if (BiasPoint != null) {
            stmt.bindLong(5, BiasPoint);
        }
 
        Double Temperature = entity.getTemperature();
        if (Temperature != null) {
            stmt.bindDouble(6, Temperature);
        }
 
        String Longitude = entity.getLongitude();
        if (Longitude != null) {
            stmt.bindString(7, Longitude);
        }
 
        String Latitude = entity.getLatitude();
        if (Latitude != null) {
            stmt.bindString(8, Latitude);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, OptTensilePointTemperature entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long InfraredTemperatureId = entity.getInfraredTemperatureId();
        if (InfraredTemperatureId != null) {
            stmt.bindLong(2, InfraredTemperatureId);
        }
 
        String Phase = entity.getPhase();
        if (Phase != null) {
            stmt.bindString(3, Phase);
        }
 
        String SideBar = entity.getSideBar();
        if (SideBar != null) {
            stmt.bindString(4, SideBar);
        }
 
        Integer BiasPoint = entity.getBiasPoint();
        if (BiasPoint != null) {
            stmt.bindLong(5, BiasPoint);
        }
 
        Double Temperature = entity.getTemperature();
        if (Temperature != null) {
            stmt.bindDouble(6, Temperature);
        }
 
        String Longitude = entity.getLongitude();
        if (Longitude != null) {
            stmt.bindString(7, Longitude);
        }
 
        String Latitude = entity.getLatitude();
        if (Latitude != null) {
            stmt.bindString(8, Latitude);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public OptTensilePointTemperature readEntity(Cursor cursor, int offset) {
        OptTensilePointTemperature entity = new OptTensilePointTemperature( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // InfraredTemperatureId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Phase
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // SideBar
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // BiasPoint
            cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5), // Temperature
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // Longitude
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // Latitude
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, OptTensilePointTemperature entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setInfraredTemperatureId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setPhase(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSideBar(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBiasPoint(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setTemperature(cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5));
        entity.setLongitude(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setLatitude(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(OptTensilePointTemperature entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(OptTensilePointTemperature entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(OptTensilePointTemperature entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "OptTensilePointTemperatureList" to-many relationship of InfraredTemperature. */
    public List<OptTensilePointTemperature> _queryInfraredTemperature_OptTensilePointTemperatureList(Long InfraredTemperatureId) {
        synchronized (this) {
            if (infraredTemperature_OptTensilePointTemperatureListQuery == null) {
                QueryBuilder<OptTensilePointTemperature> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.InfraredTemperatureId.eq(null));
                infraredTemperature_OptTensilePointTemperatureListQuery = queryBuilder.build();
            }
        }
        Query<OptTensilePointTemperature> query = infraredTemperature_OptTensilePointTemperatureListQuery.forCurrentThread();
        query.setParameter(0, InfraredTemperatureId);
        return query.list();
    }

}
