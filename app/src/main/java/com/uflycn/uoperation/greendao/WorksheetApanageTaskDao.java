package com.uflycn.uoperation.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.uflycn.uoperation.bean.WorksheetApanageTask;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "operation_WorksheetApanageTask".
*/
public class WorksheetApanageTaskDao extends AbstractDao<WorksheetApanageTask, Integer> {

    public static final String TABLENAME = "operation_WorksheetApanageTask";

    /**
     * Properties of entity WorksheetApanageTask.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property SysApanageTaskId = new Property(0, int.class, "sysApanageTaskId", true, "SYS_APANAGE_TASK_ID");
        public final static Property TaskNo = new Property(1, String.class, "TaskNo", false, "TASK_NO");
        public final static Property TaskContent = new Property(2, String.class, "TaskContent", false, "TASK_CONTENT");
        public final static Property TowerA_ID = new Property(3, int.class, "TowerA_ID", false, "TOWER_A__ID");
        public final static Property TowerB_ID = new Property(4, int.class, "TowerB_ID", false, "TOWER_B__ID");
        public final static Property Status = new Property(5, int.class, "Status", false, "STATUS");
        public final static Property Operator = new Property(6, String.class, "Operator", false, "OPERATOR");
        public final static Property OperationTime = new Property(7, String.class, "OperationTime", false, "OPERATION_TIME");
        public final static Property Remark = new Property(8, String.class, "Remark", false, "REMARK");
        public final static Property Deleted = new Property(9, boolean.class, "Deleted", false, "DELETED");
        public final static Property CreatedBy = new Property(10, String.class, "CreatedBy", false, "CREATED_BY");
        public final static Property CreatedTime = new Property(11, String.class, "CreatedTime", false, "CREATED_TIME");
        public final static Property UpdatedBy = new Property(12, String.class, "UpdatedBy", false, "UPDATED_BY");
        public final static Property UpdatedTime = new Property(13, String.class, "UpdatedTime", false, "UPDATED_TIME");
        public final static Property UploadFlag = new Property(14, boolean.class, "UploadFlag", false, "UPLOAD_FLAG");
        public final static Property StatusString = new Property(15, String.class, "StatusString", false, "STATUS_STRING");
        public final static Property Manager = new Property(16, String.class, "Manager", false, "MANAGER");
        public final static Property LineName = new Property(17, String.class, "LineName", false, "LINE_NAME");
        public final static Property TowerA_No = new Property(18, String.class, "TowerA_No", false, "TOWER_A__NO");
        public final static Property TowerB_No = new Property(19, String.class, "TowerB_No", false, "TOWER_B__NO");
        public final static Property PlanDailyPlanSectionIDs = new Property(20, String.class, "PlanDailyPlanSectionIDs", false, "PLAN_DAILY_PLAN_SECTION_IDS");
    }


    public WorksheetApanageTaskDao(DaoConfig config) {
        super(config);
    }
    
    public WorksheetApanageTaskDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"operation_WorksheetApanageTask\" (" + //
                "\"SYS_APANAGE_TASK_ID\" INTEGER PRIMARY KEY NOT NULL ," + // 0: sysApanageTaskId
                "\"TASK_NO\" TEXT," + // 1: TaskNo
                "\"TASK_CONTENT\" TEXT," + // 2: TaskContent
                "\"TOWER_A__ID\" INTEGER NOT NULL ," + // 3: TowerA_ID
                "\"TOWER_B__ID\" INTEGER NOT NULL ," + // 4: TowerB_ID
                "\"STATUS\" INTEGER NOT NULL ," + // 5: Status
                "\"OPERATOR\" TEXT," + // 6: Operator
                "\"OPERATION_TIME\" TEXT," + // 7: OperationTime
                "\"REMARK\" TEXT," + // 8: Remark
                "\"DELETED\" INTEGER NOT NULL ," + // 9: Deleted
                "\"CREATED_BY\" TEXT," + // 10: CreatedBy
                "\"CREATED_TIME\" TEXT," + // 11: CreatedTime
                "\"UPDATED_BY\" TEXT," + // 12: UpdatedBy
                "\"UPDATED_TIME\" TEXT," + // 13: UpdatedTime
                "\"UPLOAD_FLAG\" INTEGER NOT NULL ," + // 14: UploadFlag
                "\"STATUS_STRING\" TEXT," + // 15: StatusString
                "\"MANAGER\" TEXT," + // 16: Manager
                "\"LINE_NAME\" TEXT," + // 17: LineName
                "\"TOWER_A__NO\" TEXT," + // 18: TowerA_No
                "\"TOWER_B__NO\" TEXT," + // 19: TowerB_No
                "\"PLAN_DAILY_PLAN_SECTION_IDS\" TEXT);"); // 20: PlanDailyPlanSectionIDs
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"operation_WorksheetApanageTask\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, WorksheetApanageTask entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getSysApanageTaskId());
 
        String TaskNo = entity.getTaskNo();
        if (TaskNo != null) {
            stmt.bindString(2, TaskNo);
        }
 
        String TaskContent = entity.getTaskContent();
        if (TaskContent != null) {
            stmt.bindString(3, TaskContent);
        }
        stmt.bindLong(4, entity.getTowerA_ID());
        stmt.bindLong(5, entity.getTowerB_ID());
        stmt.bindLong(6, entity.getStatus());
 
        String Operator = entity.getOperator();
        if (Operator != null) {
            stmt.bindString(7, Operator);
        }
 
        String OperationTime = entity.getOperationTime();
        if (OperationTime != null) {
            stmt.bindString(8, OperationTime);
        }
 
        String Remark = entity.getRemark();
        if (Remark != null) {
            stmt.bindString(9, Remark);
        }
        stmt.bindLong(10, entity.getDeleted() ? 1L: 0L);
 
        String CreatedBy = entity.getCreatedBy();
        if (CreatedBy != null) {
            stmt.bindString(11, CreatedBy);
        }
 
        String CreatedTime = entity.getCreatedTime();
        if (CreatedTime != null) {
            stmt.bindString(12, CreatedTime);
        }
 
        String UpdatedBy = entity.getUpdatedBy();
        if (UpdatedBy != null) {
            stmt.bindString(13, UpdatedBy);
        }
 
        String UpdatedTime = entity.getUpdatedTime();
        if (UpdatedTime != null) {
            stmt.bindString(14, UpdatedTime);
        }
        stmt.bindLong(15, entity.getUploadFlag() ? 1L: 0L);
 
        String StatusString = entity.getStatusString();
        if (StatusString != null) {
            stmt.bindString(16, StatusString);
        }
 
        String Manager = entity.getManager();
        if (Manager != null) {
            stmt.bindString(17, Manager);
        }
 
        String LineName = entity.getLineName();
        if (LineName != null) {
            stmt.bindString(18, LineName);
        }
 
        String TowerA_No = entity.getTowerA_No();
        if (TowerA_No != null) {
            stmt.bindString(19, TowerA_No);
        }
 
        String TowerB_No = entity.getTowerB_No();
        if (TowerB_No != null) {
            stmt.bindString(20, TowerB_No);
        }
 
        String PlanDailyPlanSectionIDs = entity.getPlanDailyPlanSectionIDs();
        if (PlanDailyPlanSectionIDs != null) {
            stmt.bindString(21, PlanDailyPlanSectionIDs);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, WorksheetApanageTask entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getSysApanageTaskId());
 
        String TaskNo = entity.getTaskNo();
        if (TaskNo != null) {
            stmt.bindString(2, TaskNo);
        }
 
        String TaskContent = entity.getTaskContent();
        if (TaskContent != null) {
            stmt.bindString(3, TaskContent);
        }
        stmt.bindLong(4, entity.getTowerA_ID());
        stmt.bindLong(5, entity.getTowerB_ID());
        stmt.bindLong(6, entity.getStatus());
 
        String Operator = entity.getOperator();
        if (Operator != null) {
            stmt.bindString(7, Operator);
        }
 
        String OperationTime = entity.getOperationTime();
        if (OperationTime != null) {
            stmt.bindString(8, OperationTime);
        }
 
        String Remark = entity.getRemark();
        if (Remark != null) {
            stmt.bindString(9, Remark);
        }
        stmt.bindLong(10, entity.getDeleted() ? 1L: 0L);
 
        String CreatedBy = entity.getCreatedBy();
        if (CreatedBy != null) {
            stmt.bindString(11, CreatedBy);
        }
 
        String CreatedTime = entity.getCreatedTime();
        if (CreatedTime != null) {
            stmt.bindString(12, CreatedTime);
        }
 
        String UpdatedBy = entity.getUpdatedBy();
        if (UpdatedBy != null) {
            stmt.bindString(13, UpdatedBy);
        }
 
        String UpdatedTime = entity.getUpdatedTime();
        if (UpdatedTime != null) {
            stmt.bindString(14, UpdatedTime);
        }
        stmt.bindLong(15, entity.getUploadFlag() ? 1L: 0L);
 
        String StatusString = entity.getStatusString();
        if (StatusString != null) {
            stmt.bindString(16, StatusString);
        }
 
        String Manager = entity.getManager();
        if (Manager != null) {
            stmt.bindString(17, Manager);
        }
 
        String LineName = entity.getLineName();
        if (LineName != null) {
            stmt.bindString(18, LineName);
        }
 
        String TowerA_No = entity.getTowerA_No();
        if (TowerA_No != null) {
            stmt.bindString(19, TowerA_No);
        }
 
        String TowerB_No = entity.getTowerB_No();
        if (TowerB_No != null) {
            stmt.bindString(20, TowerB_No);
        }
 
        String PlanDailyPlanSectionIDs = entity.getPlanDailyPlanSectionIDs();
        if (PlanDailyPlanSectionIDs != null) {
            stmt.bindString(21, PlanDailyPlanSectionIDs);
        }
    }

    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.getInt(offset + 0);
    }    

    @Override
    public WorksheetApanageTask readEntity(Cursor cursor, int offset) {
        WorksheetApanageTask entity = new WorksheetApanageTask( //
            cursor.getInt(offset + 0), // sysApanageTaskId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // TaskNo
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // TaskContent
            cursor.getInt(offset + 3), // TowerA_ID
            cursor.getInt(offset + 4), // TowerB_ID
            cursor.getInt(offset + 5), // Status
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // Operator
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // OperationTime
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // Remark
            cursor.getShort(offset + 9) != 0, // Deleted
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // CreatedBy
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // CreatedTime
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // UpdatedBy
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // UpdatedTime
            cursor.getShort(offset + 14) != 0, // UploadFlag
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // StatusString
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // Manager
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // LineName
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // TowerA_No
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // TowerB_No
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20) // PlanDailyPlanSectionIDs
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, WorksheetApanageTask entity, int offset) {
        entity.setSysApanageTaskId(cursor.getInt(offset + 0));
        entity.setTaskNo(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTaskContent(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTowerA_ID(cursor.getInt(offset + 3));
        entity.setTowerB_ID(cursor.getInt(offset + 4));
        entity.setStatus(cursor.getInt(offset + 5));
        entity.setOperator(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setOperationTime(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setRemark(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setDeleted(cursor.getShort(offset + 9) != 0);
        entity.setCreatedBy(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setCreatedTime(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setUpdatedBy(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setUpdatedTime(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setUploadFlag(cursor.getShort(offset + 14) != 0);
        entity.setStatusString(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setManager(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setLineName(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setTowerA_No(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setTowerB_No(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setPlanDailyPlanSectionIDs(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
     }
    
    @Override
    protected final Integer updateKeyAfterInsert(WorksheetApanageTask entity, long rowId) {
        return entity.getSysApanageTaskId();
    }
    
    @Override
    public Integer getKey(WorksheetApanageTask entity) {
        if(entity != null) {
            return entity.getSysApanageTaskId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(WorksheetApanageTask entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
