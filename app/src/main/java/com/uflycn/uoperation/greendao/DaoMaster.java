package com.uflycn.uoperation.greendao;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.util.Log;

import org.greenrobot.greendao.AbstractDaoMaster;
import org.greenrobot.greendao.database.StandardDatabase;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseOpenHelper;
import org.greenrobot.greendao.identityscope.IdentityScopeType;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * Master of DAO (schema version 31): knows all DAOs.
 */
public class DaoMaster extends AbstractDaoMaster {
    public static final int SCHEMA_VERSION = 31;

    /** Creates underlying database table using DAOs. */
    public static void createAllTables(Database db, boolean ifNotExists) {
        AssistRecordDao.createTable(db, ifNotExists);
        BrokenDocumentDao.createTable(db, ifNotExists);
        BrokenInspectRecordDao.createTable(db, ifNotExists);
        DayPlanDao.createTable(db, ifNotExists);
        DayPlanDetailDao.createTable(db, ifNotExists);
        DefectBeanDao.createTable(db, ifNotExists);
        DefectDeleteRecordDao.createTable(db, ifNotExists);
        DefectRemarkDao.createTable(db, ifNotExists);
        DefectTypeDao.createTable(db, ifNotExists);
        DocumentDao.createTable(db, ifNotExists);
        EarthingResistanceDao.createTable(db, ifNotExists);
        GridlineDao.createTable(db, ifNotExists);
        IceCoverDao.createTable(db, ifNotExists);
        ImagePathsDao.createTable(db, ifNotExists);
        InfraredTemperatureDao.createTable(db, ifNotExists);
        InPlaceDao.createTable(db, ifNotExists);
        ItemDetailDao.createTable(db, ifNotExists);
        LineCrossDeleteDao.createTable(db, ifNotExists);
        LineCrossEntityDao.createTable(db, ifNotExists);
        OptTensilePointTemperatureDao.createTable(db, ifNotExists);
        OrganizitionDao.createTable(db, ifNotExists);
        PatrolTrackDao.createTable(db, ifNotExists);
        ProjectEntityDao.createTable(db, ifNotExists);
        ProjectInspectionDao.createTable(db, ifNotExists);
        RecordSyncInfoDao.createTable(db, ifNotExists);
        RoleDao.createTable(db, ifNotExists);
        RoleMenuDataDao.createTable(db, ifNotExists);
        TowerDao.createTable(db, ifNotExists);
        TowerChangeDao.createTable(db, ifNotExists);
        TreeDefectPointBeanDao.createTable(db, ifNotExists);
        UserDao.createTable(db, ifNotExists);
        UserRoleDao.createTable(db, ifNotExists);
        VirtualTowerDao.createTable(db, ifNotExists);
        WorksheetApanageTaskDao.createTable(db, ifNotExists);
        WorkSheetTaskDao.createTable(db, ifNotExists);
        ZeroDetectionDao.createTable(db, ifNotExists);
    }

    /** Drops underlying database table using DAOs. */
    public static void dropAllTables(Database db, boolean ifExists) {
        AssistRecordDao.dropTable(db, ifExists);
        BrokenDocumentDao.dropTable(db, ifExists);
        BrokenInspectRecordDao.dropTable(db, ifExists);
        DayPlanDao.dropTable(db, ifExists);
        DayPlanDetailDao.dropTable(db, ifExists);
        DefectBeanDao.dropTable(db, ifExists);
        DefectDeleteRecordDao.dropTable(db, ifExists);
        DefectRemarkDao.dropTable(db, ifExists);
        DefectTypeDao.dropTable(db, ifExists);
        DocumentDao.dropTable(db, ifExists);
        EarthingResistanceDao.dropTable(db, ifExists);
        GridlineDao.dropTable(db, ifExists);
        IceCoverDao.dropTable(db, ifExists);
        ImagePathsDao.dropTable(db, ifExists);
        InfraredTemperatureDao.dropTable(db, ifExists);
        InPlaceDao.dropTable(db, ifExists);
        ItemDetailDao.dropTable(db, ifExists);
        LineCrossDeleteDao.dropTable(db, ifExists);
        LineCrossEntityDao.dropTable(db, ifExists);
        OptTensilePointTemperatureDao.dropTable(db, ifExists);
        OrganizitionDao.dropTable(db, ifExists);
        PatrolTrackDao.dropTable(db, ifExists);
        ProjectEntityDao.dropTable(db, ifExists);
        ProjectInspectionDao.dropTable(db, ifExists);
        RecordSyncInfoDao.dropTable(db, ifExists);
        RoleDao.dropTable(db, ifExists);
        RoleMenuDataDao.dropTable(db, ifExists);
        TowerDao.dropTable(db, ifExists);
        TowerChangeDao.dropTable(db, ifExists);
        TreeDefectPointBeanDao.dropTable(db, ifExists);
        UserDao.dropTable(db, ifExists);
        UserRoleDao.dropTable(db, ifExists);
        VirtualTowerDao.dropTable(db, ifExists);
        WorksheetApanageTaskDao.dropTable(db, ifExists);
        WorkSheetTaskDao.dropTable(db, ifExists);
        ZeroDetectionDao.dropTable(db, ifExists);
    }

    /**
     * WARNING: Drops all table on Upgrade! Use only during development.
     * Convenience method using a {@link DevOpenHelper}.
     */
    public static DaoSession newDevSession(Context context, String name) {
        Database db = new DevOpenHelper(context, name).getWritableDb();
        DaoMaster daoMaster = new DaoMaster(db);
        return daoMaster.newSession();
    }

    public DaoMaster(SQLiteDatabase db) {
        this(new StandardDatabase(db));
    }

    public DaoMaster(Database db) {
        super(db, SCHEMA_VERSION);
        registerDaoClass(AssistRecordDao.class);
        registerDaoClass(BrokenDocumentDao.class);
        registerDaoClass(BrokenInspectRecordDao.class);
        registerDaoClass(DayPlanDao.class);
        registerDaoClass(DayPlanDetailDao.class);
        registerDaoClass(DefectBeanDao.class);
        registerDaoClass(DefectDeleteRecordDao.class);
        registerDaoClass(DefectRemarkDao.class);
        registerDaoClass(DefectTypeDao.class);
        registerDaoClass(DocumentDao.class);
        registerDaoClass(EarthingResistanceDao.class);
        registerDaoClass(GridlineDao.class);
        registerDaoClass(IceCoverDao.class);
        registerDaoClass(ImagePathsDao.class);
        registerDaoClass(InfraredTemperatureDao.class);
        registerDaoClass(InPlaceDao.class);
        registerDaoClass(ItemDetailDao.class);
        registerDaoClass(LineCrossDeleteDao.class);
        registerDaoClass(LineCrossEntityDao.class);
        registerDaoClass(OptTensilePointTemperatureDao.class);
        registerDaoClass(OrganizitionDao.class);
        registerDaoClass(PatrolTrackDao.class);
        registerDaoClass(ProjectEntityDao.class);
        registerDaoClass(ProjectInspectionDao.class);
        registerDaoClass(RecordSyncInfoDao.class);
        registerDaoClass(RoleDao.class);
        registerDaoClass(RoleMenuDataDao.class);
        registerDaoClass(TowerDao.class);
        registerDaoClass(TowerChangeDao.class);
        registerDaoClass(TreeDefectPointBeanDao.class);
        registerDaoClass(UserDao.class);
        registerDaoClass(UserRoleDao.class);
        registerDaoClass(VirtualTowerDao.class);
        registerDaoClass(WorksheetApanageTaskDao.class);
        registerDaoClass(WorkSheetTaskDao.class);
        registerDaoClass(ZeroDetectionDao.class);
    }

    public DaoSession newSession() {
        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
    }

    public DaoSession newSession(IdentityScopeType type) {
        return new DaoSession(db, type, daoConfigMap);
    }

    /**
     * Calls {@link #createAllTables(Database, boolean)} in {@link #onCreate(Database)} -
     */
    public static abstract class OpenHelper extends DatabaseOpenHelper {
        public OpenHelper(Context context, String name) {
            super(context, name, SCHEMA_VERSION);
        }

        public OpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory, SCHEMA_VERSION);
        }

        @Override
        public void onCreate(Database db) {
            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
            createAllTables(db, false);
        }
    }

    /** WARNING: Drops all table on Upgrade! Use only during development. */
    public static class DevOpenHelper extends OpenHelper {
        public DevOpenHelper(Context context, String name) {
            super(context, name);
        }

        public DevOpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory);
        }

        @Override
        public void onUpgrade(Database db, int oldVersion, int newVersion) {
            Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
            dropAllTables(db, true);
            onCreate(db);
        }
    }

}
