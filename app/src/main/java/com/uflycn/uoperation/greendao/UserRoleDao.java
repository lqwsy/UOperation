package com.uflycn.uoperation.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.uflycn.uoperation.bean.UserRole;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "t_userrole".
*/
public class UserRoleDao extends AbstractDao<UserRole, String> {

    public static final String TABLENAME = "t_userrole";

    /**
     * Properties of entity UserRole.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property UserRoleId = new Property(0, String.class, "UserRoleId", true, "USER_ROLE_ID");
        public final static Property UserId = new Property(1, String.class, "UserId", false, "USER_ID");
        public final static Property RoleId = new Property(2, String.class, "RoleId", false, "ROLE_ID");
        public final static Property CreateDate = new Property(3, String.class, "CreateDate", false, "CREATE_DATE");
        public final static Property CreateUserId = new Property(4, String.class, "CreateUserId", false, "CREATE_USER_ID");
        public final static Property CreateUserName = new Property(5, String.class, "CreateUserName", false, "CREATE_USER_NAME");
    }


    public UserRoleDao(DaoConfig config) {
        super(config);
    }
    
    public UserRoleDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"t_userrole\" (" + //
                "\"USER_ROLE_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: UserRoleId
                "\"USER_ID\" TEXT," + // 1: UserId
                "\"ROLE_ID\" TEXT," + // 2: RoleId
                "\"CREATE_DATE\" TEXT," + // 3: CreateDate
                "\"CREATE_USER_ID\" TEXT," + // 4: CreateUserId
                "\"CREATE_USER_NAME\" TEXT);"); // 5: CreateUserName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"t_userrole\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserRole entity) {
        stmt.clearBindings();
 
        String UserRoleId = entity.getUserRoleId();
        if (UserRoleId != null) {
            stmt.bindString(1, UserRoleId);
        }
 
        String UserId = entity.getUserId();
        if (UserId != null) {
            stmt.bindString(2, UserId);
        }
 
        String RoleId = entity.getRoleId();
        if (RoleId != null) {
            stmt.bindString(3, RoleId);
        }
 
        String CreateDate = entity.getCreateDate();
        if (CreateDate != null) {
            stmt.bindString(4, CreateDate);
        }
 
        String CreateUserId = entity.getCreateUserId();
        if (CreateUserId != null) {
            stmt.bindString(5, CreateUserId);
        }
 
        String CreateUserName = entity.getCreateUserName();
        if (CreateUserName != null) {
            stmt.bindString(6, CreateUserName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserRole entity) {
        stmt.clearBindings();
 
        String UserRoleId = entity.getUserRoleId();
        if (UserRoleId != null) {
            stmt.bindString(1, UserRoleId);
        }
 
        String UserId = entity.getUserId();
        if (UserId != null) {
            stmt.bindString(2, UserId);
        }
 
        String RoleId = entity.getRoleId();
        if (RoleId != null) {
            stmt.bindString(3, RoleId);
        }
 
        String CreateDate = entity.getCreateDate();
        if (CreateDate != null) {
            stmt.bindString(4, CreateDate);
        }
 
        String CreateUserId = entity.getCreateUserId();
        if (CreateUserId != null) {
            stmt.bindString(5, CreateUserId);
        }
 
        String CreateUserName = entity.getCreateUserName();
        if (CreateUserName != null) {
            stmt.bindString(6, CreateUserName);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public UserRole readEntity(Cursor cursor, int offset) {
        UserRole entity = new UserRole( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // UserRoleId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // UserId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // RoleId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // CreateDate
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // CreateUserId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // CreateUserName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserRole entity, int offset) {
        entity.setUserRoleId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setRoleId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCreateDate(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCreateUserId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCreateUserName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final String updateKeyAfterInsert(UserRole entity, long rowId) {
        return entity.getUserRoleId();
    }
    
    @Override
    public String getKey(UserRole entity) {
        if(entity != null) {
            return entity.getUserRoleId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserRole entity) {
        return entity.getUserRoleId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
