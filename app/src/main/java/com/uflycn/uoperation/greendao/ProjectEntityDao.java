package com.uflycn.uoperation.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.uflycn.uoperation.bean.ProjectEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "operation_Project".
*/
public class ProjectEntityDao extends AbstractDao<ProjectEntity, Long> {

    public static final String TABLENAME = "operation_Project";

    /**
     * Properties of entity ProjectEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property SysBrokenDocumentId = new Property(0, Long.class, "sysBrokenDocumentId", true, "_id");
        public final static Property PlatformId = new Property(1, int.class, "PlatformId", false, "PLATFORM_ID");
        public final static Property SysTaskId = new Property(2, int.class, "sysTaskId", false, "SYS_TASK_ID");
        public final static Property ProjectNo = new Property(3, String.class, "ProjectNo", false, "PROJECT_NO");
        public final static Property ProjectName = new Property(4, String.class, "ProjectName", false, "PROJECT_NAME");
        public final static Property ProjectDescription = new Property(5, String.class, "ProjectDescription", false, "PROJECT_DESCRIPTION");
        public final static Property ProjectImage = new Property(6, String.class, "ProjectImage", false, "PROJECT_IMAGE");
        public final static Property ProjectStatus = new Property(7, int.class, "ProjectStatus", false, "PROJECT_STATUS");
        public final static Property Deleted = new Property(8, boolean.class, "Deleted", false, "DELETED");
        public final static Property CreatedBy = new Property(9, String.class, "CreatedBy", false, "CREATED_BY");
        public final static Property CreatedTime = new Property(10, String.class, "CreatedTime", false, "CREATED_TIME");
        public final static Property UpdatedBy = new Property(11, String.class, "UpdatedBy", false, "UPDATED_BY");
        public final static Property UpdatedTime = new Property(12, String.class, "UpdatedTime", false, "UPDATED_TIME");
        public final static Property UploadFlag = new Property(13, int.class, "UploadFlag", false, "UPLOAD_FLAG");
        public final static Property ProjectManager = new Property(14, String.class, "ProjectManager", false, "PROJECT_MANAGER");
        public final static Property GridLineName = new Property(15, String.class, "GridLineName", false, "GRID_LINE_NAME");
        public final static Property VoltageClass = new Property(16, String.class, "VoltageClass", false, "VOLTAGE_CLASS");
        public final static Property StartTowerNo = new Property(17, String.class, "StartTowerNo", false, "START_TOWER_NO");
        public final static Property EndTowerNo = new Property(18, String.class, "EndTowerNo", false, "END_TOWER_NO");
        public final static Property PlanDailyPlanSectionIDs = new Property(19, String.class, "PlanDailyPlanSectionIDs", false, "PLAN_DAILY_PLAN_SECTION_IDS");
        public final static Property SysPatrolExecutionID = new Property(20, String.class, "sysPatrolExecutionID", false, "SYS_PATROL_EXECUTION_ID");
    }


    public ProjectEntityDao(DaoConfig config) {
        super(config);
    }
    
    public ProjectEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"operation_Project\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: sysBrokenDocumentId
                "\"PLATFORM_ID\" INTEGER NOT NULL ," + // 1: PlatformId
                "\"SYS_TASK_ID\" INTEGER NOT NULL ," + // 2: sysTaskId
                "\"PROJECT_NO\" TEXT," + // 3: ProjectNo
                "\"PROJECT_NAME\" TEXT," + // 4: ProjectName
                "\"PROJECT_DESCRIPTION\" TEXT," + // 5: ProjectDescription
                "\"PROJECT_IMAGE\" TEXT," + // 6: ProjectImage
                "\"PROJECT_STATUS\" INTEGER NOT NULL ," + // 7: ProjectStatus
                "\"DELETED\" INTEGER NOT NULL ," + // 8: Deleted
                "\"CREATED_BY\" TEXT," + // 9: CreatedBy
                "\"CREATED_TIME\" TEXT," + // 10: CreatedTime
                "\"UPDATED_BY\" TEXT," + // 11: UpdatedBy
                "\"UPDATED_TIME\" TEXT," + // 12: UpdatedTime
                "\"UPLOAD_FLAG\" INTEGER NOT NULL ," + // 13: UploadFlag
                "\"PROJECT_MANAGER\" TEXT," + // 14: ProjectManager
                "\"GRID_LINE_NAME\" TEXT," + // 15: GridLineName
                "\"VOLTAGE_CLASS\" TEXT," + // 16: VoltageClass
                "\"START_TOWER_NO\" TEXT," + // 17: StartTowerNo
                "\"END_TOWER_NO\" TEXT," + // 18: EndTowerNo
                "\"PLAN_DAILY_PLAN_SECTION_IDS\" TEXT," + // 19: PlanDailyPlanSectionIDs
                "\"SYS_PATROL_EXECUTION_ID\" TEXT);"); // 20: sysPatrolExecutionID
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"operation_Project\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ProjectEntity entity) {
        stmt.clearBindings();
 
        Long sysBrokenDocumentId = entity.getSysBrokenDocumentId();
        if (sysBrokenDocumentId != null) {
            stmt.bindLong(1, sysBrokenDocumentId);
        }
        stmt.bindLong(2, entity.getPlatformId());
        stmt.bindLong(3, entity.getSysTaskId());
 
        String ProjectNo = entity.getProjectNo();
        if (ProjectNo != null) {
            stmt.bindString(4, ProjectNo);
        }
 
        String ProjectName = entity.getProjectName();
        if (ProjectName != null) {
            stmt.bindString(5, ProjectName);
        }
 
        String ProjectDescription = entity.getProjectDescription();
        if (ProjectDescription != null) {
            stmt.bindString(6, ProjectDescription);
        }
 
        String ProjectImage = entity.getProjectImage();
        if (ProjectImage != null) {
            stmt.bindString(7, ProjectImage);
        }
        stmt.bindLong(8, entity.getProjectStatus());
        stmt.bindLong(9, entity.getDeleted() ? 1L: 0L);
 
        String CreatedBy = entity.getCreatedBy();
        if (CreatedBy != null) {
            stmt.bindString(10, CreatedBy);
        }
 
        String CreatedTime = entity.getCreatedTime();
        if (CreatedTime != null) {
            stmt.bindString(11, CreatedTime);
        }
 
        String UpdatedBy = entity.getUpdatedBy();
        if (UpdatedBy != null) {
            stmt.bindString(12, UpdatedBy);
        }
 
        String UpdatedTime = entity.getUpdatedTime();
        if (UpdatedTime != null) {
            stmt.bindString(13, UpdatedTime);
        }
        stmt.bindLong(14, entity.getUploadFlag());
 
        String ProjectManager = entity.getProjectManager();
        if (ProjectManager != null) {
            stmt.bindString(15, ProjectManager);
        }
 
        String GridLineName = entity.getGridLineName();
        if (GridLineName != null) {
            stmt.bindString(16, GridLineName);
        }
 
        String VoltageClass = entity.getVoltageClass();
        if (VoltageClass != null) {
            stmt.bindString(17, VoltageClass);
        }
 
        String StartTowerNo = entity.getStartTowerNo();
        if (StartTowerNo != null) {
            stmt.bindString(18, StartTowerNo);
        }
 
        String EndTowerNo = entity.getEndTowerNo();
        if (EndTowerNo != null) {
            stmt.bindString(19, EndTowerNo);
        }
 
        String PlanDailyPlanSectionIDs = entity.getPlanDailyPlanSectionIDs();
        if (PlanDailyPlanSectionIDs != null) {
            stmt.bindString(20, PlanDailyPlanSectionIDs);
        }
 
        String sysPatrolExecutionID = entity.getSysPatrolExecutionID();
        if (sysPatrolExecutionID != null) {
            stmt.bindString(21, sysPatrolExecutionID);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ProjectEntity entity) {
        stmt.clearBindings();
 
        Long sysBrokenDocumentId = entity.getSysBrokenDocumentId();
        if (sysBrokenDocumentId != null) {
            stmt.bindLong(1, sysBrokenDocumentId);
        }
        stmt.bindLong(2, entity.getPlatformId());
        stmt.bindLong(3, entity.getSysTaskId());
 
        String ProjectNo = entity.getProjectNo();
        if (ProjectNo != null) {
            stmt.bindString(4, ProjectNo);
        }
 
        String ProjectName = entity.getProjectName();
        if (ProjectName != null) {
            stmt.bindString(5, ProjectName);
        }
 
        String ProjectDescription = entity.getProjectDescription();
        if (ProjectDescription != null) {
            stmt.bindString(6, ProjectDescription);
        }
 
        String ProjectImage = entity.getProjectImage();
        if (ProjectImage != null) {
            stmt.bindString(7, ProjectImage);
        }
        stmt.bindLong(8, entity.getProjectStatus());
        stmt.bindLong(9, entity.getDeleted() ? 1L: 0L);
 
        String CreatedBy = entity.getCreatedBy();
        if (CreatedBy != null) {
            stmt.bindString(10, CreatedBy);
        }
 
        String CreatedTime = entity.getCreatedTime();
        if (CreatedTime != null) {
            stmt.bindString(11, CreatedTime);
        }
 
        String UpdatedBy = entity.getUpdatedBy();
        if (UpdatedBy != null) {
            stmt.bindString(12, UpdatedBy);
        }
 
        String UpdatedTime = entity.getUpdatedTime();
        if (UpdatedTime != null) {
            stmt.bindString(13, UpdatedTime);
        }
        stmt.bindLong(14, entity.getUploadFlag());
 
        String ProjectManager = entity.getProjectManager();
        if (ProjectManager != null) {
            stmt.bindString(15, ProjectManager);
        }
 
        String GridLineName = entity.getGridLineName();
        if (GridLineName != null) {
            stmt.bindString(16, GridLineName);
        }
 
        String VoltageClass = entity.getVoltageClass();
        if (VoltageClass != null) {
            stmt.bindString(17, VoltageClass);
        }
 
        String StartTowerNo = entity.getStartTowerNo();
        if (StartTowerNo != null) {
            stmt.bindString(18, StartTowerNo);
        }
 
        String EndTowerNo = entity.getEndTowerNo();
        if (EndTowerNo != null) {
            stmt.bindString(19, EndTowerNo);
        }
 
        String PlanDailyPlanSectionIDs = entity.getPlanDailyPlanSectionIDs();
        if (PlanDailyPlanSectionIDs != null) {
            stmt.bindString(20, PlanDailyPlanSectionIDs);
        }
 
        String sysPatrolExecutionID = entity.getSysPatrolExecutionID();
        if (sysPatrolExecutionID != null) {
            stmt.bindString(21, sysPatrolExecutionID);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ProjectEntity readEntity(Cursor cursor, int offset) {
        ProjectEntity entity = new ProjectEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // sysBrokenDocumentId
            cursor.getInt(offset + 1), // PlatformId
            cursor.getInt(offset + 2), // sysTaskId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // ProjectNo
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // ProjectName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // ProjectDescription
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // ProjectImage
            cursor.getInt(offset + 7), // ProjectStatus
            cursor.getShort(offset + 8) != 0, // Deleted
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // CreatedBy
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // CreatedTime
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // UpdatedBy
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // UpdatedTime
            cursor.getInt(offset + 13), // UploadFlag
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // ProjectManager
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // GridLineName
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // VoltageClass
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // StartTowerNo
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // EndTowerNo
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // PlanDailyPlanSectionIDs
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20) // sysPatrolExecutionID
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ProjectEntity entity, int offset) {
        entity.setSysBrokenDocumentId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPlatformId(cursor.getInt(offset + 1));
        entity.setSysTaskId(cursor.getInt(offset + 2));
        entity.setProjectNo(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setProjectName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setProjectDescription(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setProjectImage(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setProjectStatus(cursor.getInt(offset + 7));
        entity.setDeleted(cursor.getShort(offset + 8) != 0);
        entity.setCreatedBy(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCreatedTime(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setUpdatedBy(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setUpdatedTime(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setUploadFlag(cursor.getInt(offset + 13));
        entity.setProjectManager(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setGridLineName(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setVoltageClass(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setStartTowerNo(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setEndTowerNo(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setPlanDailyPlanSectionIDs(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setSysPatrolExecutionID(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ProjectEntity entity, long rowId) {
        entity.setSysBrokenDocumentId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ProjectEntity entity) {
        if(entity != null) {
            return entity.getSysBrokenDocumentId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ProjectEntity entity) {
        return entity.getSysBrokenDocumentId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
