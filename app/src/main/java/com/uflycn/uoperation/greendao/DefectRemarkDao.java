package com.uflycn.uoperation.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.uflycn.uoperation.bean.DefectRemark;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "operation_defect_remark".
*/
public class DefectRemarkDao extends AbstractDao<DefectRemark, Long> {

    public static final String TABLENAME = "operation_defect_remark";

    /**
     * Properties of entity DefectRemark.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "Id", true, "_id");
        public final static Property DefectId = new Property(1, int.class, "defectId", false, "DEFECT_ID");
        public final static Property LocalDefectId = new Property(2, int.class, "localDefectId", false, "LOCAL_DEFECT_ID");
        public final static Property CreatedTime = new Property(3, String.class, "CreatedTime", false, "CREATED_TIME");
        public final static Property Remark = new Property(4, String.class, "Remark", false, "REMARK");
        public final static Property UploadFlag = new Property(5, int.class, "UploadFlag", false, "UPLOAD_FLAG");
        public final static Property DefectType = new Property(6, String.class, "DefectType", false, "DEFECT_TYPE");
        public final static Property PlanDailyPlanSectionIDs = new Property(7, String.class, "PlanDailyPlanSectionIDs", false, "PLAN_DAILY_PLAN_SECTION_IDS");
        public final static Property SysPatrolExecutionID = new Property(8, String.class, "sysPatrolExecutionID", false, "SYS_PATROL_EXECUTION_ID");
    }


    public DefectRemarkDao(DaoConfig config) {
        super(config);
    }
    
    public DefectRemarkDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"operation_defect_remark\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: Id
                "\"DEFECT_ID\" INTEGER NOT NULL ," + // 1: defectId
                "\"LOCAL_DEFECT_ID\" INTEGER NOT NULL ," + // 2: localDefectId
                "\"CREATED_TIME\" TEXT," + // 3: CreatedTime
                "\"REMARK\" TEXT," + // 4: Remark
                "\"UPLOAD_FLAG\" INTEGER NOT NULL ," + // 5: UploadFlag
                "\"DEFECT_TYPE\" TEXT," + // 6: DefectType
                "\"PLAN_DAILY_PLAN_SECTION_IDS\" TEXT," + // 7: PlanDailyPlanSectionIDs
                "\"SYS_PATROL_EXECUTION_ID\" TEXT);"); // 8: sysPatrolExecutionID
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"operation_defect_remark\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DefectRemark entity) {
        stmt.clearBindings();
 
        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(1, Id);
        }
        stmt.bindLong(2, entity.getDefectId());
        stmt.bindLong(3, entity.getLocalDefectId());
 
        String CreatedTime = entity.getCreatedTime();
        if (CreatedTime != null) {
            stmt.bindString(4, CreatedTime);
        }
 
        String Remark = entity.getRemark();
        if (Remark != null) {
            stmt.bindString(5, Remark);
        }
        stmt.bindLong(6, entity.getUploadFlag());
 
        String DefectType = entity.getDefectType();
        if (DefectType != null) {
            stmt.bindString(7, DefectType);
        }
 
        String PlanDailyPlanSectionIDs = entity.getPlanDailyPlanSectionIDs();
        if (PlanDailyPlanSectionIDs != null) {
            stmt.bindString(8, PlanDailyPlanSectionIDs);
        }
 
        String sysPatrolExecutionID = entity.getSysPatrolExecutionID();
        if (sysPatrolExecutionID != null) {
            stmt.bindString(9, sysPatrolExecutionID);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DefectRemark entity) {
        stmt.clearBindings();
 
        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(1, Id);
        }
        stmt.bindLong(2, entity.getDefectId());
        stmt.bindLong(3, entity.getLocalDefectId());
 
        String CreatedTime = entity.getCreatedTime();
        if (CreatedTime != null) {
            stmt.bindString(4, CreatedTime);
        }
 
        String Remark = entity.getRemark();
        if (Remark != null) {
            stmt.bindString(5, Remark);
        }
        stmt.bindLong(6, entity.getUploadFlag());
 
        String DefectType = entity.getDefectType();
        if (DefectType != null) {
            stmt.bindString(7, DefectType);
        }
 
        String PlanDailyPlanSectionIDs = entity.getPlanDailyPlanSectionIDs();
        if (PlanDailyPlanSectionIDs != null) {
            stmt.bindString(8, PlanDailyPlanSectionIDs);
        }
 
        String sysPatrolExecutionID = entity.getSysPatrolExecutionID();
        if (sysPatrolExecutionID != null) {
            stmt.bindString(9, sysPatrolExecutionID);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DefectRemark readEntity(Cursor cursor, int offset) {
        DefectRemark entity = new DefectRemark( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // Id
            cursor.getInt(offset + 1), // defectId
            cursor.getInt(offset + 2), // localDefectId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // CreatedTime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // Remark
            cursor.getInt(offset + 5), // UploadFlag
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // DefectType
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // PlanDailyPlanSectionIDs
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // sysPatrolExecutionID
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DefectRemark entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDefectId(cursor.getInt(offset + 1));
        entity.setLocalDefectId(cursor.getInt(offset + 2));
        entity.setCreatedTime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRemark(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUploadFlag(cursor.getInt(offset + 5));
        entity.setDefectType(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPlanDailyPlanSectionIDs(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSysPatrolExecutionID(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DefectRemark entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DefectRemark entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DefectRemark entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
