package com.uflycn.uoperation.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.uflycn.uoperation.bean.DefectDeleteRecord;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "operation_defect_delete".
*/
public class DefectDeleteRecordDao extends AbstractDao<DefectDeleteRecord, Long> {

    public static final String TABLENAME = "operation_defect_delete";

    /**
     * Properties of entity DefectDeleteRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "Id", true, "_id");
        public final static Property LocalDefectId = new Property(1, String.class, "LocalDefectId", false, "LOCAL_DEFECT_ID");
        public final static Property PirctruePath = new Property(2, String.class, "PirctruePath", false, "PIRCTRUE_PATH");
        public final static Property CreateDate = new Property(3, String.class, "CreateDate", false, "CREATE_DATE");
        public final static Property SysDefectId = new Property(4, String.class, "sysDefectId", false, "SYS_DEFECT_ID");
        public final static Property Remark = new Property(5, String.class, "Remark", false, "REMARK");
        public final static Property UploadFlag = new Property(6, int.class, "UploadFlag", false, "UPLOAD_FLAG");
        public final static Property DefectCategory = new Property(7, int.class, "DefectCategory", false, "DEFECT_CATEGORY");
        public final static Property TreeCutCount = new Property(8, Integer.class, "TreeCutCount", false, "TREE_CUT_COUNT");
        public final static Property PlanDailyPlanSectionIDs = new Property(9, String.class, "PlanDailyPlanSectionIDs", false, "PLAN_DAILY_PLAN_SECTION_IDS");
    }


    public DefectDeleteRecordDao(DaoConfig config) {
        super(config);
    }
    
    public DefectDeleteRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"operation_defect_delete\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: Id
                "\"LOCAL_DEFECT_ID\" TEXT," + // 1: LocalDefectId
                "\"PIRCTRUE_PATH\" TEXT," + // 2: PirctruePath
                "\"CREATE_DATE\" TEXT," + // 3: CreateDate
                "\"SYS_DEFECT_ID\" TEXT," + // 4: sysDefectId
                "\"REMARK\" TEXT," + // 5: Remark
                "\"UPLOAD_FLAG\" INTEGER NOT NULL ," + // 6: UploadFlag
                "\"DEFECT_CATEGORY\" INTEGER NOT NULL ," + // 7: DefectCategory
                "\"TREE_CUT_COUNT\" INTEGER," + // 8: TreeCutCount
                "\"PLAN_DAILY_PLAN_SECTION_IDS\" TEXT);"); // 9: PlanDailyPlanSectionIDs
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"operation_defect_delete\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DefectDeleteRecord entity) {
        stmt.clearBindings();
 
        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(1, Id);
        }
 
        String LocalDefectId = entity.getLocalDefectId();
        if (LocalDefectId != null) {
            stmt.bindString(2, LocalDefectId);
        }
 
        String PirctruePath = entity.getPirctruePath();
        if (PirctruePath != null) {
            stmt.bindString(3, PirctruePath);
        }
 
        String CreateDate = entity.getCreateDate();
        if (CreateDate != null) {
            stmt.bindString(4, CreateDate);
        }
 
        String sysDefectId = entity.getSysDefectId();
        if (sysDefectId != null) {
            stmt.bindString(5, sysDefectId);
        }
 
        String Remark = entity.getRemark();
        if (Remark != null) {
            stmt.bindString(6, Remark);
        }
        stmt.bindLong(7, entity.getUploadFlag());
        stmt.bindLong(8, entity.getDefectCategory());
 
        Integer TreeCutCount = entity.getTreeCutCount();
        if (TreeCutCount != null) {
            stmt.bindLong(9, TreeCutCount);
        }
 
        String PlanDailyPlanSectionIDs = entity.getPlanDailyPlanSectionIDs();
        if (PlanDailyPlanSectionIDs != null) {
            stmt.bindString(10, PlanDailyPlanSectionIDs);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DefectDeleteRecord entity) {
        stmt.clearBindings();
 
        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(1, Id);
        }
 
        String LocalDefectId = entity.getLocalDefectId();
        if (LocalDefectId != null) {
            stmt.bindString(2, LocalDefectId);
        }
 
        String PirctruePath = entity.getPirctruePath();
        if (PirctruePath != null) {
            stmt.bindString(3, PirctruePath);
        }
 
        String CreateDate = entity.getCreateDate();
        if (CreateDate != null) {
            stmt.bindString(4, CreateDate);
        }
 
        String sysDefectId = entity.getSysDefectId();
        if (sysDefectId != null) {
            stmt.bindString(5, sysDefectId);
        }
 
        String Remark = entity.getRemark();
        if (Remark != null) {
            stmt.bindString(6, Remark);
        }
        stmt.bindLong(7, entity.getUploadFlag());
        stmt.bindLong(8, entity.getDefectCategory());
 
        Integer TreeCutCount = entity.getTreeCutCount();
        if (TreeCutCount != null) {
            stmt.bindLong(9, TreeCutCount);
        }
 
        String PlanDailyPlanSectionIDs = entity.getPlanDailyPlanSectionIDs();
        if (PlanDailyPlanSectionIDs != null) {
            stmt.bindString(10, PlanDailyPlanSectionIDs);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DefectDeleteRecord readEntity(Cursor cursor, int offset) {
        DefectDeleteRecord entity = new DefectDeleteRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // Id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // LocalDefectId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // PirctruePath
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // CreateDate
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // sysDefectId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // Remark
            cursor.getInt(offset + 6), // UploadFlag
            cursor.getInt(offset + 7), // DefectCategory
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // TreeCutCount
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // PlanDailyPlanSectionIDs
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DefectDeleteRecord entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLocalDefectId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPirctruePath(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCreateDate(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSysDefectId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRemark(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUploadFlag(cursor.getInt(offset + 6));
        entity.setDefectCategory(cursor.getInt(offset + 7));
        entity.setTreeCutCount(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setPlanDailyPlanSectionIDs(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DefectDeleteRecord entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DefectDeleteRecord entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DefectDeleteRecord entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
