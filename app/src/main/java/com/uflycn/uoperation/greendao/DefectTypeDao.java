package com.uflycn.uoperation.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.uflycn.uoperation.bean.DefectType;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "t_DefectType".
*/
public class DefectTypeDao extends AbstractDao<DefectType, Long> {

    public static final String TABLENAME = "t_DefectType";

    /**
     * Properties of entity DefectType.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property SysDefectTypeID = new Property(0, Long.class, "sysDefectTypeID", true, "sysDefectTypeID");
        public final static Property DefectParentId = new Property(1, int.class, "DefectParentId", false, "DEFECT_PARENT_ID");
        public final static Property DefectCategory = new Property(2, int.class, "DefectCategory", false, "DEFECT_CATEGORY");
        public final static Property DefectLevel = new Property(3, int.class, "DefectLevel", false, "DEFECT_LEVEL");
        public final static Property DefectName = new Property(4, String.class, "DefectName", false, "DEFECT_NAME");
        public final static Property DefectNo = new Property(5, String.class, "DefectNo", false, "DEFECT_NO");
        public final static Property SeverityLevel = new Property(6, int.class, "SeverityLevel", false, "SEVERITY_LEVEL");
        public final static Property Standard = new Property(7, int.class, "Standard", false, "STANDARD");
        public final static Property Deleted = new Property(8, boolean.class, "Deleted", false, "DELETED");
    }


    public DefectTypeDao(DaoConfig config) {
        super(config);
    }
    
    public DefectTypeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"t_DefectType\" (" + //
                "\"sysDefectTypeID\" INTEGER PRIMARY KEY ," + // 0: sysDefectTypeID
                "\"DEFECT_PARENT_ID\" INTEGER NOT NULL ," + // 1: DefectParentId
                "\"DEFECT_CATEGORY\" INTEGER NOT NULL ," + // 2: DefectCategory
                "\"DEFECT_LEVEL\" INTEGER NOT NULL ," + // 3: DefectLevel
                "\"DEFECT_NAME\" TEXT," + // 4: DefectName
                "\"DEFECT_NO\" TEXT," + // 5: DefectNo
                "\"SEVERITY_LEVEL\" INTEGER NOT NULL ," + // 6: SeverityLevel
                "\"STANDARD\" INTEGER NOT NULL ," + // 7: Standard
                "\"DELETED\" INTEGER NOT NULL );"); // 8: Deleted
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"t_DefectType\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DefectType entity) {
        stmt.clearBindings();
 
        Long sysDefectTypeID = entity.getSysDefectTypeID();
        if (sysDefectTypeID != null) {
            stmt.bindLong(1, sysDefectTypeID);
        }
        stmt.bindLong(2, entity.getDefectParentId());
        stmt.bindLong(3, entity.getDefectCategory());
        stmt.bindLong(4, entity.getDefectLevel());
 
        String DefectName = entity.getDefectName();
        if (DefectName != null) {
            stmt.bindString(5, DefectName);
        }
 
        String DefectNo = entity.getDefectNo();
        if (DefectNo != null) {
            stmt.bindString(6, DefectNo);
        }
        stmt.bindLong(7, entity.getSeverityLevel());
        stmt.bindLong(8, entity.getStandard());
        stmt.bindLong(9, entity.getDeleted() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DefectType entity) {
        stmt.clearBindings();
 
        Long sysDefectTypeID = entity.getSysDefectTypeID();
        if (sysDefectTypeID != null) {
            stmt.bindLong(1, sysDefectTypeID);
        }
        stmt.bindLong(2, entity.getDefectParentId());
        stmt.bindLong(3, entity.getDefectCategory());
        stmt.bindLong(4, entity.getDefectLevel());
 
        String DefectName = entity.getDefectName();
        if (DefectName != null) {
            stmt.bindString(5, DefectName);
        }
 
        String DefectNo = entity.getDefectNo();
        if (DefectNo != null) {
            stmt.bindString(6, DefectNo);
        }
        stmt.bindLong(7, entity.getSeverityLevel());
        stmt.bindLong(8, entity.getStandard());
        stmt.bindLong(9, entity.getDeleted() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DefectType readEntity(Cursor cursor, int offset) {
        DefectType entity = new DefectType( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // sysDefectTypeID
            cursor.getInt(offset + 1), // DefectParentId
            cursor.getInt(offset + 2), // DefectCategory
            cursor.getInt(offset + 3), // DefectLevel
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // DefectName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // DefectNo
            cursor.getInt(offset + 6), // SeverityLevel
            cursor.getInt(offset + 7), // Standard
            cursor.getShort(offset + 8) != 0 // Deleted
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DefectType entity, int offset) {
        entity.setSysDefectTypeID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDefectParentId(cursor.getInt(offset + 1));
        entity.setDefectCategory(cursor.getInt(offset + 2));
        entity.setDefectLevel(cursor.getInt(offset + 3));
        entity.setDefectName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDefectNo(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSeverityLevel(cursor.getInt(offset + 6));
        entity.setStandard(cursor.getInt(offset + 7));
        entity.setDeleted(cursor.getShort(offset + 8) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DefectType entity, long rowId) {
        entity.setSysDefectTypeID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DefectType entity) {
        if(entity != null) {
            return entity.getSysDefectTypeID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DefectType entity) {
        return entity.getSysDefectTypeID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
