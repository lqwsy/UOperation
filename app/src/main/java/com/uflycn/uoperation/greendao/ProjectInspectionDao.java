package com.uflycn.uoperation.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.uflycn.uoperation.bean.ProjectInspection;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "operation_ProjectInspection".
*/
public class ProjectInspectionDao extends AbstractDao<ProjectInspection, Long> {

    public static final String TABLENAME = "operation_ProjectInspection";

    /**
     * Properties of entity ProjectInspection.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property SysProjectInspectionId = new Property(0, Long.class, "sysProjectInspectionId", true, "_id");
        public final static Property SysProjectId = new Property(1, int.class, "sysProjectId", false, "SYS_PROJECT_ID");
        public final static Property LocalProjectId = new Property(2, int.class, "localProjectId", false, "LOCAL_PROJECT_ID");
        public final static Property SysUserId = new Property(3, String.class, "sysUserId", false, "SYS_USER_ID");
        public final static Property State = new Property(4, int.class, "State", false, "STATE");
        public final static Property PatrolImage = new Property(5, String.class, "PatrolImage", false, "PATROL_IMAGE");
        public final static Property Remark = new Property(6, String.class, "Remark", false, "REMARK");
        public final static Property CreateDate = new Property(7, String.class, "CreateDate", false, "CREATE_DATE");
        public final static Property CheckedTime = new Property(8, String.class, "CheckedTime", false, "CHECKED_TIME");
        public final static Property UploadFlag = new Property(9, int.class, "UploadFlag", false, "UPLOAD_FLAG");
        public final static Property PlanDailyPlanSectionIDs = new Property(10, String.class, "PlanDailyPlanSectionIDs", false, "PLAN_DAILY_PLAN_SECTION_IDS");
        public final static Property SysPatrolExecutionID = new Property(11, String.class, "sysPatrolExecutionID", false, "SYS_PATROL_EXECUTION_ID");
    }


    public ProjectInspectionDao(DaoConfig config) {
        super(config);
    }
    
    public ProjectInspectionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"operation_ProjectInspection\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: sysProjectInspectionId
                "\"SYS_PROJECT_ID\" INTEGER NOT NULL ," + // 1: sysProjectId
                "\"LOCAL_PROJECT_ID\" INTEGER NOT NULL ," + // 2: localProjectId
                "\"SYS_USER_ID\" TEXT," + // 3: sysUserId
                "\"STATE\" INTEGER NOT NULL ," + // 4: State
                "\"PATROL_IMAGE\" TEXT," + // 5: PatrolImage
                "\"REMARK\" TEXT," + // 6: Remark
                "\"CREATE_DATE\" TEXT," + // 7: CreateDate
                "\"CHECKED_TIME\" TEXT," + // 8: CheckedTime
                "\"UPLOAD_FLAG\" INTEGER NOT NULL ," + // 9: UploadFlag
                "\"PLAN_DAILY_PLAN_SECTION_IDS\" TEXT," + // 10: PlanDailyPlanSectionIDs
                "\"SYS_PATROL_EXECUTION_ID\" TEXT);"); // 11: sysPatrolExecutionID
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"operation_ProjectInspection\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ProjectInspection entity) {
        stmt.clearBindings();
 
        Long sysProjectInspectionId = entity.getSysProjectInspectionId();
        if (sysProjectInspectionId != null) {
            stmt.bindLong(1, sysProjectInspectionId);
        }
        stmt.bindLong(2, entity.getSysProjectId());
        stmt.bindLong(3, entity.getLocalProjectId());
 
        String sysUserId = entity.getSysUserId();
        if (sysUserId != null) {
            stmt.bindString(4, sysUserId);
        }
        stmt.bindLong(5, entity.getState());
 
        String PatrolImage = entity.getPatrolImage();
        if (PatrolImage != null) {
            stmt.bindString(6, PatrolImage);
        }
 
        String Remark = entity.getRemark();
        if (Remark != null) {
            stmt.bindString(7, Remark);
        }
 
        String CreateDate = entity.getCreateDate();
        if (CreateDate != null) {
            stmt.bindString(8, CreateDate);
        }
 
        String CheckedTime = entity.getCheckedTime();
        if (CheckedTime != null) {
            stmt.bindString(9, CheckedTime);
        }
        stmt.bindLong(10, entity.getUploadFlag());
 
        String PlanDailyPlanSectionIDs = entity.getPlanDailyPlanSectionIDs();
        if (PlanDailyPlanSectionIDs != null) {
            stmt.bindString(11, PlanDailyPlanSectionIDs);
        }
 
        String sysPatrolExecutionID = entity.getSysPatrolExecutionID();
        if (sysPatrolExecutionID != null) {
            stmt.bindString(12, sysPatrolExecutionID);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ProjectInspection entity) {
        stmt.clearBindings();
 
        Long sysProjectInspectionId = entity.getSysProjectInspectionId();
        if (sysProjectInspectionId != null) {
            stmt.bindLong(1, sysProjectInspectionId);
        }
        stmt.bindLong(2, entity.getSysProjectId());
        stmt.bindLong(3, entity.getLocalProjectId());
 
        String sysUserId = entity.getSysUserId();
        if (sysUserId != null) {
            stmt.bindString(4, sysUserId);
        }
        stmt.bindLong(5, entity.getState());
 
        String PatrolImage = entity.getPatrolImage();
        if (PatrolImage != null) {
            stmt.bindString(6, PatrolImage);
        }
 
        String Remark = entity.getRemark();
        if (Remark != null) {
            stmt.bindString(7, Remark);
        }
 
        String CreateDate = entity.getCreateDate();
        if (CreateDate != null) {
            stmt.bindString(8, CreateDate);
        }
 
        String CheckedTime = entity.getCheckedTime();
        if (CheckedTime != null) {
            stmt.bindString(9, CheckedTime);
        }
        stmt.bindLong(10, entity.getUploadFlag());
 
        String PlanDailyPlanSectionIDs = entity.getPlanDailyPlanSectionIDs();
        if (PlanDailyPlanSectionIDs != null) {
            stmt.bindString(11, PlanDailyPlanSectionIDs);
        }
 
        String sysPatrolExecutionID = entity.getSysPatrolExecutionID();
        if (sysPatrolExecutionID != null) {
            stmt.bindString(12, sysPatrolExecutionID);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ProjectInspection readEntity(Cursor cursor, int offset) {
        ProjectInspection entity = new ProjectInspection( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // sysProjectInspectionId
            cursor.getInt(offset + 1), // sysProjectId
            cursor.getInt(offset + 2), // localProjectId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // sysUserId
            cursor.getInt(offset + 4), // State
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // PatrolImage
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // Remark
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // CreateDate
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // CheckedTime
            cursor.getInt(offset + 9), // UploadFlag
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // PlanDailyPlanSectionIDs
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // sysPatrolExecutionID
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ProjectInspection entity, int offset) {
        entity.setSysProjectInspectionId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSysProjectId(cursor.getInt(offset + 1));
        entity.setLocalProjectId(cursor.getInt(offset + 2));
        entity.setSysUserId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setState(cursor.getInt(offset + 4));
        entity.setPatrolImage(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setRemark(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCreateDate(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCheckedTime(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setUploadFlag(cursor.getInt(offset + 9));
        entity.setPlanDailyPlanSectionIDs(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setSysPatrolExecutionID(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ProjectInspection entity, long rowId) {
        entity.setSysProjectInspectionId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ProjectInspection entity) {
        if(entity != null) {
            return entity.getSysProjectInspectionId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ProjectInspection entity) {
        return entity.getSysProjectInspectionId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
