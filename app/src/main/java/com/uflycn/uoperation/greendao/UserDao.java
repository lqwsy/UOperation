package com.uflycn.uoperation.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.uflycn.uoperation.bean.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "t_user".
*/
public class UserDao extends AbstractDao<User, String> {

    public static final String TABLENAME = "t_user";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property UserId = new Property(0, String.class, "UserId", true, "UserId");
        public final static Property Code = new Property(1, String.class, "Code", false, "CODE");
        public final static Property RealName = new Property(2, String.class, "RealName", false, "REAL_NAME");
        public final static Property Spell = new Property(3, String.class, "Spell", false, "SPELL");
        public final static Property Alias = new Property(4, String.class, "Alias", false, "ALIAS");
        public final static Property DepartmentId = new Property(5, String.class, "DepartmentId", false, "DEPARTMENT_ID");
        public final static Property Account = new Property(6, String.class, "Account", false, "ACCOUNT");
        public final static Property Password = new Property(7, String.class, "Password", false, "PASSWORD");
        public final static Property Secretkey = new Property(8, String.class, "Secretkey", false, "SECRETKEY");
        public final static Property SortCode = new Property(9, int.class, "SortCode", false, "SORT_CODE");
        public final static Property DeleteMark = new Property(10, int.class, "DeleteMark", false, "DELETE_MARK");
    }


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"t_user\" (" + //
                "\"UserId\" TEXT PRIMARY KEY NOT NULL ," + // 0: UserId
                "\"CODE\" TEXT," + // 1: Code
                "\"REAL_NAME\" TEXT," + // 2: RealName
                "\"SPELL\" TEXT," + // 3: Spell
                "\"ALIAS\" TEXT," + // 4: Alias
                "\"DEPARTMENT_ID\" TEXT," + // 5: DepartmentId
                "\"ACCOUNT\" TEXT," + // 6: Account
                "\"PASSWORD\" TEXT," + // 7: Password
                "\"SECRETKEY\" TEXT," + // 8: Secretkey
                "\"SORT_CODE\" INTEGER NOT NULL ," + // 9: SortCode
                "\"DELETE_MARK\" INTEGER NOT NULL );"); // 10: DeleteMark
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"t_user\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User entity) {
        stmt.clearBindings();
 
        String UserId = entity.getUserId();
        if (UserId != null) {
            stmt.bindString(1, UserId);
        }
 
        String Code = entity.getCode();
        if (Code != null) {
            stmt.bindString(2, Code);
        }
 
        String RealName = entity.getRealName();
        if (RealName != null) {
            stmt.bindString(3, RealName);
        }
 
        String Spell = entity.getSpell();
        if (Spell != null) {
            stmt.bindString(4, Spell);
        }
 
        String Alias = entity.getAlias();
        if (Alias != null) {
            stmt.bindString(5, Alias);
        }
 
        String DepartmentId = entity.getDepartmentId();
        if (DepartmentId != null) {
            stmt.bindString(6, DepartmentId);
        }
 
        String Account = entity.getAccount();
        if (Account != null) {
            stmt.bindString(7, Account);
        }
 
        String Password = entity.getPassword();
        if (Password != null) {
            stmt.bindString(8, Password);
        }
 
        String Secretkey = entity.getSecretkey();
        if (Secretkey != null) {
            stmt.bindString(9, Secretkey);
        }
        stmt.bindLong(10, entity.getSortCode());
        stmt.bindLong(11, entity.getDeleteMark());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        String UserId = entity.getUserId();
        if (UserId != null) {
            stmt.bindString(1, UserId);
        }
 
        String Code = entity.getCode();
        if (Code != null) {
            stmt.bindString(2, Code);
        }
 
        String RealName = entity.getRealName();
        if (RealName != null) {
            stmt.bindString(3, RealName);
        }
 
        String Spell = entity.getSpell();
        if (Spell != null) {
            stmt.bindString(4, Spell);
        }
 
        String Alias = entity.getAlias();
        if (Alias != null) {
            stmt.bindString(5, Alias);
        }
 
        String DepartmentId = entity.getDepartmentId();
        if (DepartmentId != null) {
            stmt.bindString(6, DepartmentId);
        }
 
        String Account = entity.getAccount();
        if (Account != null) {
            stmt.bindString(7, Account);
        }
 
        String Password = entity.getPassword();
        if (Password != null) {
            stmt.bindString(8, Password);
        }
 
        String Secretkey = entity.getSecretkey();
        if (Secretkey != null) {
            stmt.bindString(9, Secretkey);
        }
        stmt.bindLong(10, entity.getSortCode());
        stmt.bindLong(11, entity.getDeleteMark());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // UserId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // Code
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // RealName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Spell
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // Alias
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // DepartmentId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // Account
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // Password
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // Secretkey
            cursor.getInt(offset + 9), // SortCode
            cursor.getInt(offset + 10) // DeleteMark
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setUserId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setRealName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSpell(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAlias(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDepartmentId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAccount(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPassword(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSecretkey(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSortCode(cursor.getInt(offset + 9));
        entity.setDeleteMark(cursor.getInt(offset + 10));
     }
    
    @Override
    protected final String updateKeyAfterInsert(User entity, long rowId) {
        return entity.getUserId();
    }
    
    @Override
    public String getKey(User entity) {
        if(entity != null) {
            return entity.getUserId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(User entity) {
        return entity.getUserId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
